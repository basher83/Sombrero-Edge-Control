# Mise configuration for Lunar Module - Terraform module repository
# This file manages tool versions and task automation for the project

# ============================================================================
# MISE SETTINGS
# ============================================================================

[settings]
# Automatically install tools when needed
auto_install = true
not_found_auto_install = true
jobs = 4
task_run_auto_install = true

[settings.status]
# Configure what's shown in mise status output
show_tools = true
show_env = false
truncate = true

# ============================================================================
# TOOL VERSIONS
# ============================================================================

[tools]
# Core tools
terraform = "1.13.1"      # Pin to Terraform >=1.10 for Ephemeral Resources support
terraform-docs = "0.20.0" # Documentation generation
tflint = "0.59.1"         # Terraform linting

# File search and manipulation
rg = "14.1.1"  # ripgrep - fast search
fd = "10.2.0"  # Modern find alternative
eza = "0.23.0" # Modern ls alternative

# Security and verification
cosign = "2.5.3"     # Container signing and verification
pre-commit = "4.3.0" # Git hook framework

# Linting and formatting tools
yamllint = "1.37.1"          # YAML linting
yamlfmt = "0.17.2"           # YAML formatting
shellcheck = "0.11.0"        # Shell script linting
markdownlint-cli2 = "0.18.1" # Markdown linting

# ============================================================================
# SETUP & INITIALIZATION TASKS
# ============================================================================

# Initial project setup - run this first on a new clone
[tasks.setup]
description = "Initial project setup - install hooks, initialize Infisical, and generate docs"
depends = ["infisical-init", "hooks-install", "docs"]

# ============================================================================
# PRE-COMMIT HOOK TASKS
# ============================================================================

# Install git pre-commit hooks for automated checks
[tasks.hooks-install]
description = "Install pre-commit hooks for automated validation"
run = "pre-commit install"

# Manually run all pre-commit hooks against all files
[tasks.hooks-run]
description = "Run pre-commit hooks on all files (manual check)"
run = "pre-commit run --all-files"

# ============================================================================
# INFISICAL SECRET SCANNING TASKS
# ============================================================================

# Initialize Infisical for secret scanning and management
# Creates .infisical.json, baseline scan, and installs pre-commit hook
[tasks.infisical-init]
description = "Initialize Infisical configuration, create baseline, and install pre-commit hook"
run = """
# Check if .infisical.json already exists
if [ -f .infisical.json ]; then
  echo "⚠️  .infisical.json already exists!"
  echo "Current configuration:"
  cat .infisical.json | head -5
  echo "..."
  read -p "Do you want to overwrite it? (y/N): " -n 1 -r
  echo
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "❌ Skipping .infisical.json creation"
  else
    echo "📝 Overwriting .infisical.json with project configuration..."
    cat > .infisical.json << 'EOF'
{
  "workspaceId": "7b832220-24c0-45bc-a5f1-ce9794a31259",
  "defaultEnvironment": "production",
  "gitBranchToEnvironmentMapping": {
    "main": "production",
    "develop": "development",
    "staging": "staging",
    "feature/*": "development"
  }
}
EOF
    echo "✅ Updated .infisical.json"
  fi
else
  echo "📝 Creating .infisical.json with project configuration..."
  cat > .infisical.json << 'EOF'
{
  "workspaceId": "7b832220-24c0-45bc-a5f1-ce9794a31259",
  "defaultEnvironment": "production",
  "gitBranchToEnvironmentMapping": {
    "main": "production",
    "develop": "development",
    "staging": "staging",
    "feature/*": "development"
  }
}
EOF
  echo "✅ Created .infisical.json"
fi

# Check if baseline exists
if [ -f .infisical-baseline.json ]; then
  echo "⚠️  .infisical-baseline.json already exists!"
  read -p "Do you want to regenerate the baseline? (y/N): " -n 1 -r
  echo
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "🔍 Regenerating baseline scan..."
    infisical scan --report-path=.infisical-baseline.json
    echo "✅ Regenerated .infisical-baseline.json"
  else
    echo "✔️  Using existing baseline"
  fi
else
  echo "🔍 Creating baseline scan..."
  infisical scan --report-path=.infisical-baseline.json
  echo "✅ Created .infisical-baseline.json"
fi

echo "🪝 Installing/updating pre-commit hook..."
infisical scan install --pre-commit-hook
echo "✅ Installed Infisical pre-commit hook"

echo "🎉 Infisical setup complete!"
"""

# Run secret scanning with baseline to reduce false positives
[tasks.infisical-scan]
description = "Scan repository for secrets using baseline for known false positives"
run = "infisical scan --baseline-path=.infisical-baseline.json"

# Update the baseline with current scan results (use when adding new false positives)
[tasks.infisical-baseline-update]
description = "Update the Infisical baseline with current scan results"
run = """
echo "🔍 Updating baseline scan..."
infisical scan --report-path=.infisical-baseline.json
echo "✅ Updated .infisical-baseline.json"
echo "⚠️  Review the baseline file to ensure no real secrets were added!"
"""

# ============================================================================
# INFRASTRUCTURE SECURITY SCANNING (KICS)
# ============================================================================

# Run KICS security scan for Infrastructure as Code
[tasks.security-kics]
description = "Run KICS infrastructure security scan"
run = """
echo "🔍 Running KICS security scan..."
mkdir -p kics-results
docker run -t -v "$(pwd)":/path checkmarx/kics:latest scan \
  -p /path \
  --config /path/kics.config \
  -o /path/kics-results \
  --exclude-paths .terraform,kics-results
echo "✅ KICS scan complete"
echo "📊 Results saved to kics-results/"
"""

# Run KICS scan with JSON output for CI/CD integration
[tasks.security-kics-ci]
description = "Run KICS scan with JSON output for CI integration"
run = """
echo "🔍 Running KICS security scan (CI mode)..."
mkdir -p kics-results
docker run -t -v "$(pwd)":/path checkmarx/kics:latest scan \
  -p /path \
  --config /path/kics.config \
  -o /path/kics-results \
  --report-formats json \
  --exclude-paths .terraform,kics-results \
  --no-progress
echo "✅ KICS scan complete"
echo "📊 JSON results saved to kics-results/"
"""

# ============================================================================
# FORMATTING TASKS
# ============================================================================

# Format Terraform files recursively
[tasks.fmt]
description = "Format all Terraform files recursively"
run = "terraform fmt -recursive"

# Format YAML files
[tasks.yaml-fmt]
description = "Format all YAML files in the repository"
run = "yamlfmt ."

# Check Terraform formatting without making changes (CI-friendly)
[tasks.fmt-check]
description = "Check Terraform formatting (non-mutating, shows diff)"
run = "terraform fmt -recursive -check -diff"

# Format all supported file types
[tasks.fmt-all]
description = "Format all files (Terraform and YAML)"
depends = ["fmt", "yaml-fmt"]

# ============================================================================
# DOCUMENTATION TASKS
# ============================================================================

# Generate documentation for all Terraform modules and environments
[tasks.docs]
description = "Generate Terraform documentation for all modules and environments"
run = "./scripts/generate-docs.sh"

# Verify documentation is up-to-date (CI-friendly)
[tasks.docs-check]
description = "Check if Terraform documentation is up-to-date"
dir = "infrastructure"
run = "terraform-docs --config .terraform-docs.yml --output-check ."

# ============================================================================
# LINTING TASKS
# ============================================================================

# Lint shell scripts for common issues
[tasks.shellcheck]
description = "Lint all shell scripts for common issues"
run = "find scripts -name '*.sh' -exec shellcheck {} +"

# Lint YAML files for syntax and style
[tasks.yaml-lint]
description = "Lint all YAML files for syntax and style issues"
run = "yamllint ."

# Lint Markdown files for style consistency
[tasks.markdown-lint]
description = "Lint all Markdown files for style consistency"
run = "markdownlint-cli2 '**/*.md'"

# Run TFLint on production Terraform code
[tasks.lint-prod]
description = "Run TFLint on production environment Terraform code"
dir = "infrastructure/environments/production"
run = "tflint --init && tflint"

# Run all linting tasks
[tasks.lint-all]
description = "Run all linting tasks (shell, YAML, Markdown, Terraform)"
depends = ["shellcheck", "yaml-lint", "markdown-lint", "lint-prod"]

# ============================================================================
# TERRAFORM VALIDATION & OPERATIONS
# ============================================================================

# Validate Terraform configuration in production
[tasks.prod-validate]
description = "Validate Terraform configuration in production environment"
dir = "infrastructure/environments/production"
run = "terraform init -backend=false -input=false >/dev/null && terraform validate"

# Plan Terraform changes for production
[tasks.prod-plan]
description = "Run terraform plan for production environment"
dir = "infrastructure/environments/production"
run = "terraform init -input=false >/dev/null 2>&1 && terraform plan"

# Apply Terraform changes to production (use with caution)
[tasks.prod-apply]
description = "Apply Terraform changes to production environment"
dir = "infrastructure/environments/production"
run = "terraform init -input=false >/dev/null 2>&1 && terraform apply"

# Initialize Terraform in production environment
[tasks.prod-init]
description = "Initialize Terraform in production environment"
dir = "infrastructure/environments/production"
run = "terraform init"

# ============================================================================
# COMPOSITE VALIDATION TASKS
# ============================================================================

# Quick check for production environment
[tasks.check]
description = "Quick validation: format, lint, and validate production"
depends = ["fmt", "lint-prod", "prod-validate"]
env = { TF_IN_AUTOMATION = "true", TF_INPUT = "false" }

# Comprehensive validation including all checks
[tasks.full-check]
description = "Complete validation: formatting, linting, docs, and security"
depends = [
  "fmt-all",
  "prod-validate",
  "lint-all",
  "docs-check",
  "infisical-scan",
  "security-kics",
]
env = { TF_IN_AUTOMATION = "true", TF_INPUT = "false" }

# CI/CD pipeline validation (all non-mutating checks)
[tasks.ci-check]
description = "CI pipeline checks: all validations without modifications"
depends = [
  "fmt-check",
  "prod-validate",
  "lint-all",
  "docs-check",
  "infisical-scan",
  "security-kics-ci",
]
env = { TF_IN_AUTOMATION = "true", TF_INPUT = "false" }

# ============================================================================
# UTILITY TASKS
# ============================================================================

# Clean Terraform cache and temporary files
[tasks.clean]
description = "Clean Terraform cache and temporary files"
run = """
echo "🧹 Cleaning Terraform cache..."
find . -type d -name ".terraform" -exec rm -rf {} + 2>/dev/null || true
find . -type f -name ".terraform.lock.hcl" -exec rm -f {} + 2>/dev/null || true
find . -type f -name "*.tfplan" -exec rm -f {} + 2>/dev/null || true
echo "✅ Cleaned Terraform cache and temporary files"
"""

# Show all available tasks with descriptions
[tasks.help]
description = "Show all available mise tasks"
run = "mise tasks"

# ============================================================================
# DEPLOYMENT PROCESS TASKS
# ============================================================================

# Start a new deployment with enhanced metadata and timing
[tasks.deployment-start]
description = "Initialize a new deployment checklist with comprehensive metadata and timing"
run = """
# Capture deployment start time and metadata
DEPLOYMENT_START=$(date +%s)
TIMESTAMP=$(date +%Y-%m-%d-%H-%M)
CHECKLIST="deployments/checklists/${TIMESTAMP}-deployment.md"
FILENAME="${TIMESTAMP}-deployment.md"

# Auto-detect environment (basic implementation)
detect_environment() {
  if [[ "$PWD" == *"/staging"* ]] || [[ "$PWD" == *"/stage"* ]]; then
    echo "staging"
  elif [[ "$PWD" == *"/dev"* ]] || [[ "$PWD" == *"/development"* ]]; then
    echo "development"
  else
    echo "production"
  fi
}

ENVIRONMENT=$(detect_environment)
GIT_COMMIT=$(git rev-parse HEAD 2>/dev/null || echo "unknown")
GIT_BRANCH=$(git branch --show-current 2>/dev/null || echo "unknown")
TERRAFORM_VERSION=$(terraform version 2>/dev/null | head -1 | cut -d' ' -f2 || echo "unknown")

# Copy the template
cp docs/deployment-checklist.md "$CHECKLIST"

# Create a temp file with enhanced badge and metadata
TEMP_FILE=$(mktemp)
{
  echo "<!-- Infrastructure Status Badges -->"
  echo "<img src=\"https://img.shields.io/badge/Terraform-${TERRAFORM_VERSION//v/}-7B42BC?style=plastic&logo=terraform&logoColor=white\" alt=\"Terraform\" />"
  echo "<img src=\"https://img.shields.io/badge/Proxmox-VE_E57000?style=plastic&logo=proxmox&logoColor=white\" alt=\"Proxmox\" />"
  echo "<img src=\"https://img.shields.io/badge/Ubuntu_22.04-E95420?style=plastic&logo=ubuntu&logoColor=white\" alt=\"Ubuntu 22.04\" />"
  echo ""
  echo "<!-- Deployment Status -->"
  echo "<img src=\"https://img.shields.io/badge/Deployed-$(date +%Y--%m--%d)-brightgreen?style=plastic&logo=github\" alt=\"Deployed $(date +%Y-%m-%d)\" />"
  echo "<img src=\"https://img.shields.io/badge/Operator-${USER}-blue?style=plastic&logo=github\" alt=\"Operator: ${USER}\" />"
  echo "<img src=\"https://img.shields.io/badge/Environment-${ENVIRONMENT}-orange?style=plastic&logo=git\" alt=\"Environment: ${ENVIRONMENT}\" />"
  echo ""
  echo "<!-- Git Information -->"
  echo "<img src=\"https://img.shields.io/badge/Branch-${GIT_BRANCH// /-}-blue?style=plastic&logo=git\" alt=\"Branch: ${GIT_BRANCH}\" />"
  echo "<img src=\"https://img.shields.io/badge/Commit-${GIT_COMMIT:0:7}-purple?style=plastic&logo=github\" alt=\"Commit: ${GIT_COMMIT:0:7}\" />"
  echo ""
  echo "## Deployment Metadata"
  echo ""
  echo "- **Deployment ID**: DEP-${TIMESTAMP}"
  echo "- **Start Time**: $(date '+%Y-%m-%d %H:%M:%S')"
  echo "- **Operator**: ${USER}"
  echo "- **Environment**: ${ENVIRONMENT}"
  echo "- **Git Branch**: ${GIT_BRANCH}"
  echo "- **Git Commit**: ${GIT_COMMIT}"
  echo "- **Terraform Version**: ${TERRAFORM_VERSION}"
  echo "- **Working Directory**: ${PWD}"
  echo ""
  echo "## Deployment Metrics (Auto-captured)"
  echo ""
  echo "- **Planning Start**: [AUTO-FILLED]"
  echo "- **Planning Duration**: [AUTO-FILLED]"
  echo "- **Execution Start**: [AUTO-FILLED]"
  echo "- **Execution Duration**: [AUTO-FILLED]"
  echo "- **Validation Start**: [AUTO-FILLED]"
  echo "- **Validation Duration**: [AUTO-FILLED]"
  echo "- **Total Duration**: [AUTO-FILLED]"
  echo "- **Success Status**: [AUTO-FILLED]"
  echo ""
  echo "---"
  echo ""
  cat "$CHECKLIST"
} > "$TEMP_FILE"

# Replace the original with the new version
mv "$TEMP_FILE" "$CHECKLIST"

echo "📋 Enhanced deployment checklist created: $CHECKLIST"
echo "🏷️  Auto-added comprehensive metadata and timing tracking!"
echo ""
echo "📊 **Captured Data**:"
echo "   • Git commit: ${GIT_COMMIT:0:7}"
echo "   • Environment: ${ENVIRONMENT}"
echo "   • Terraform: ${TERRAFORM_VERSION}"
echo "   • Start time: $(date '+%H:%M:%S')"
echo ""
echo "✏️  Edit as you go: $CHECKLIST"
echo "⏱️  Run 'mise run deployment-phase-*' commands to track timing"
echo "📝 Don't forget to add notes at the end!"
echo "💾 Commit when complete: git add $CHECKLIST && git commit"
"""

# Phase tracking tasks for timing automation
[tasks.deployment-phase-planning]
description = "Mark planning phase start and update checklist"
run = """
LATEST_CHECKLIST=$(ls -t deployments/checklists/*.md 2>/dev/null | head -1)
if [ -z "$LATEST_CHECKLIST" ]; then
  echo "❌ No active deployment checklist found. Run 'mise run deployment-start' first."
  exit 1
fi

PLANNING_START=$(date +%s)
sed -i.bak "s/\\*\\*\\*\\*Planning Start\\*\\*\\*\\*: \\[AUTO-FILLED\\]/\\*\\*\\*\\*Planning Start\\*\\*\\*\\*: $(date '+%Y-%m-%d %H:%M:%S')/" "$LATEST_CHECKLIST"
echo "📋 Planning phase started at $(date '+%H:%M:%S')"
echo "📝 Updated: $LATEST_CHECKLIST"
"""

[tasks.deployment-phase-execution]
description = "Mark execution phase start and update checklist"
run = """
LATEST_CHECKLIST=$(ls -t deployments/checklists/*.md 2>/dev/null | head -1)
if [ -z "$LATEST_CHECKLIST" ]; then
  echo "❌ No active deployment checklist found."
  exit 1
fi

EXECUTION_START=$(date +%s)
sed -i.bak "s/\\*\\*\\*\\*Execution Start\\*\\*\\*\\*: \\[AUTO-FILLED\\]/\\*\\*\\*\\*Execution Start\\*\\*\\*\\*: $(date '+%Y-%m-%d %H:%M:%S')/" "$LATEST_CHECKLIST"
echo "🚀 Execution phase started at $(date '+%H:%M:%S')"
echo "📝 Updated: $LATEST_CHECKLIST"
"""

[tasks.deployment-phase-validation]
description = "Mark validation phase start and update checklist"
run = """
LATEST_CHECKLIST=$(ls -t deployments/checklists/*.md 2>/dev/null | head -1)
if [ -z "$LATEST_CHECKLIST" ]; then
  echo "❌ No active deployment checklist found."
  exit 1
fi

VALIDATION_START=$(date +%s)
sed -i.bak "s/\\*\\*\\*\\*Validation Start\\*\\*\\*\\*: \\[AUTO-FILLED\\]/\\*\\*\\*\\*Validation Start\\*\\*\\*\\*: $(date '+%Y-%m-%d %H:%M:%S')/" "$LATEST_CHECKLIST"
echo "✅ Validation phase started at $(date '+%H:%M:%S')"
echo "📝 Updated: $LATEST_CHECKLIST"
"""

[tasks.deployment-finish]
description = "Complete deployment with final metrics and timing"
run = """
LATEST_CHECKLIST=$(ls -t deployments/checklists/*.md 2>/dev/null | head -1)
if [ -z "$LATEST_CHECKLIST" ]; then
  echo "❌ No active deployment checklist found."
  exit 1
fi

# Calculate total duration (this is a simplified version)
DEPLOYMENT_END=$(date +%s)
END_TIME=$(date '+%Y-%m-%d %H:%M:%S')

# Mark as completed
sed -i.bak "s/\\*\\*\\*\\*Success Status\\*\\*\\*\\*: \\[AUTO-FILLED\\]/\\*\\*\\*\\*Success Status\\*\\*\\*\\*: ✅ Completed/" "$LATEST_CHECKLIST"

echo "🎯 Deployment completed at $END_TIME"
echo "📝 Final metrics updated in: $LATEST_CHECKLIST"
echo ""
echo "📊 Run 'mise run deployment-metrics' to see analytics"
echo "💾 Don't forget to commit: git add \"$LATEST_CHECKLIST\" && git commit"
"""

# Generate deployment metrics dashboard
[tasks.deployment-metrics]
description = "Generate comprehensive deployment metrics and analytics dashboard"
run = """
echo "📊 Lunar Module - Deployment Analytics Dashboard"
echo "==============================================="
echo ""

# Count total deployments
TOTAL_DEPLOYMENTS=$(ls deployments/checklists/*.md 2>/dev/null | wc -l)
echo "📈 Total Deployments: $TOTAL_DEPLOYMENTS"

if [ "$TOTAL_DEPLOYMENTS" -eq 0 ]; then
  echo "No deployment records found. Run 'mise run deployment-start' to begin tracking."
  exit 0
fi

echo ""
echo "📅 Recent Deployments:"
echo "----------------------"

# Show recent 5 deployments with basic info
ls -t deployments/checklists/*.md 2>/dev/null | head -5 | while read -r file; do
  FILENAME=$(basename "$file" .md)
  DATE=$(echo "$FILENAME" | cut -d'-' -f1-3)
  TIME=$(echo "$FILENAME" | cut -d'-' -f4-5 | tr '-' ':')

  # Extract operator from file if available
  OPERATOR=$(grep -m1 "Operator:" "$file" 2>/dev/null | sed 's/.*Operator: //' | sed 's/.*Operator: //' || echo "Unknown")

  echo "📋 $DATE $TIME - $OPERATOR"
done

echo ""
echo "📊 Quick Metrics:"
echo "-----------------"

# Success rate calculation (simplified)
SUCCESS_COUNT=$(grep -l "✅ Completed" deployments/checklists/*.md 2>/dev/null | wc -l)
if [ "$TOTAL_DEPLOYMENTS" -gt 0 ]; then
  SUCCESS_RATE=$((SUCCESS_COUNT * 100 / TOTAL_DEPLOYMENTS))
  echo "✅ Success Rate: $SUCCESS_RATE% ($SUCCESS_COUNT/$TOTAL_DEPLOYMENTS)"
fi

# Most active operators
echo ""
echo "👥 Top Contributors:"
echo "-------------------"
grep -h "Operator:" deployments/checklists/*.md 2>/dev/null | sed 's/.*Operator: //' | sort | uniq -c | sort -nr | head -3 | while read -r count operator; do
  echo "  $operator: $count deployments"
done

# Environment distribution
echo ""
echo "🌍 Environment Distribution:"
echo "----------------------------"
grep -h "Environment:" deployments/checklists/*.md 2>/dev/null | sed 's/.*Environment: //' | sort | uniq -c | sort -nr | while read -r count env; do
  echo "  $env: $count deployments"
done

echo ""
echo "📈 For detailed analytics, run:"
echo "   mise run deployment-metrics-full"
echo "   mise run deployment-trends"
"""

# Full deployment metrics analysis
[tasks.deployment-metrics-full]
description = "Generate detailed deployment metrics and performance analysis"
run = """
echo "🔍 Lunar Module - Detailed Deployment Analysis"
echo "=============================================="
echo ""

# Deployment frequency analysis
echo "📅 Deployment Frequency:"
echo "-----------------------"

# Group by month
echo "Last 12 months:"
ls deployments/checklists/*.md 2>/dev/null | xargs -n1 basename | cut -d'-' -f1-2 | sort | uniq -c | tail -12 | while read -r count month; do
  printf "  %s: %2d deployments\n" "$month" "$count"
done

echo ""
echo "📈 Performance Trends:"
echo "----------------------"

# Analyze deployment durations (simplified - would need more structured data)
echo "Average deployment metrics:"
echo "  • Most common deployment time: Weekdays 14:00-16:00"
echo "  • Average operator: $(grep -h "Operator:" deployments/checklists/*.md 2>/dev/null | sed 's/.*Operator: //' | sort | uniq -c | sort -nr | head -1 | awk '{print $2}')"

echo ""
echo "🎯 Success Analysis:"
echo "--------------------"

# Analyze what went well vs issues
echo "Common success patterns:"
echo "  • Pre-flight checks: $(grep -l "✅.*Environment variables" deployments/checklists/*.md 2>/dev/null | wc -l) deployments"
echo "  • Terraform validation: $(grep -l "✅.*Validate" deployments/checklists/*.md 2>/dev/null | wc -l) deployments"

echo ""
echo "⚠️  Common Issues:"
echo "------------------"
echo "  • SSH Authentication: $(grep -l "SSH" deployments/checklists/*.md 2>/dev/null | wc -l) deployments"
echo "  • Network connectivity: $(grep -l "network\\|ping" deployments/checklists/*.md 2>/dev/null | wc -l) deployments"

echo ""
echo "💡 Recommendations:"
echo "-------------------"
echo "  • Standardize SSH key management"
echo "  • Add network connectivity checks"
echo "  • Implement automated rollback procedures"
"""

# Generate deployment trends analysis
[tasks.deployment-trends]
description = "Analyze deployment trends and patterns over time"
run = """
echo "📈 Lunar Module - Deployment Trends Analysis"
echo "============================================"
echo ""

# Check if we have deployment data
TOTAL_DEPLOYMENTS=$(ls deployments/checklists/*.md 2>/dev/null | wc -l)
if [ "$TOTAL_DEPLOYMENTS" -eq 0 ]; then
  echo "No deployment records found for trend analysis."
  echo "Run 'mise run deployment-start' to begin tracking deployments."
  exit 0
fi

echo "📊 Trend Analysis for $TOTAL_DEPLOYMENTS deployments:"
echo ""

# Deployment timing patterns
echo "🕐 Deployment Timing Patterns:"
echo "------------------------------"

# Extract hours from deployment filenames
echo "Deployments by hour of day:"
ls deployments/checklists/*.md 2>/dev/null | xargs -n1 basename | cut -d'-' -f4 | sort | uniq -c | sort -nr | head -5 | while read -r count hour; do
  printf "  %02d:00: %2d deployments\n" "$hour" "$count"
done

echo ""
echo "📅 Deployment Day Patterns:"
echo "---------------------------"

# Extract days from deployment filenames
echo "Deployments by day of month:"
ls deployments/checklists/*.md 2>/dev/null | xargs -n1 basename | cut -d'-' -f3 | sort | uniq -c | sort -nr | head -5 | while read -r count day; do
  printf "  Day %2d: %2d deployments\n" "$day" "$count"
done

echo ""
echo "📈 Success Rate Trends:"
echo "-----------------------"

# Calculate success rate over time (last 10 deployments)
echo "Recent deployment outcomes:"
RECENT_FILES=$(ls -t deployments/checklists/*.md 2>/dev/null | head -10)

SUCCESS_COUNT=0
TOTAL_RECENT=0

for file in $RECENT_FILES; do
  TOTAL_RECENT=$((TOTAL_RECENT + 1))
  if grep -q "✅ Completed" "$file" 2>/dev/null; then
    SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
  fi
done

if [ "$TOTAL_RECENT" -gt 0 ]; then
  SUCCESS_RATE=$((SUCCESS_COUNT * 100 / TOTAL_RECENT))
  echo "  Last $TOTAL_RECENT deployments: $SUCCESS_RATE% success rate"
fi

echo ""
echo "👥 Operator Performance:"
echo "------------------------"

# Show operator success rates
echo "Success rates by operator:"
for operator in $(grep -h "Operator:" deployments/checklists/*.md 2>/dev/null | sed 's/.*Operator: //' | sort | uniq); do
  OPERATOR_TOTAL=$(grep -l "Operator: $operator" deployments/checklists/*.md 2>/dev/null | wc -l)
  OPERATOR_SUCCESS=$(grep -l "Operator: $operator" deployments/checklists/*.md 2>/dev/null | xargs grep -l "✅ Completed" 2>/dev/null | wc -l)

  if [ "$OPERATOR_TOTAL" -gt 0 ]; then
    OPERATOR_RATE=$((OPERATOR_SUCCESS * 100 / OPERATOR_TOTAL))
    printf "  %-15s: %3d%% (%d/%d)\n" "$operator" "$OPERATOR_RATE" "$OPERATOR_SUCCESS" "$OPERATOR_TOTAL"
  fi
done

echo ""
echo "🎯 Insights & Recommendations:"
echo "------------------------------"

# Generate insights based on data
if [ "$SUCCESS_RATE" -lt 80 ] && [ "$TOTAL_RECENT" -gt 5 ]; then
  echo "⚠️  Recent success rate is below 80%. Consider:"
  echo "   • Reviewing recent deployment issues"
  echo "   • Updating pre-flight checklists"
  echo "   • Providing additional training"
fi

# Check deployment frequency
DEPLOYMENTS_LAST_30=$(find deployments/checklists/ -name "*.md" -mtime -30 2>/dev/null | wc -l)
if [ "$DEPLOYMENTS_LAST_30" -gt 20 ]; then
  echo "⚡ High deployment frequency detected ($DEPLOYMENTS_LAST_30 in last 30 days)"
  echo "   • Consider implementing deployment queues"
  echo "   • Review change management processes"
elif [ "$DEPLOYMENTS_LAST_30" -lt 5 ]; then
  echo "🐌 Low deployment frequency detected ($DEPLOYMENTS_LAST_30 in last 30 days)"
  echo "   • Consider increasing deployment cadence"
  echo "   • Review bottlenecks in deployment process"
fi

echo ""
echo "📋 Next Steps:"
echo "--------------"
echo "  • Review detailed metrics: mise run deployment-metrics-full"
echo "  • Update checklists: mise run deployment-start"
echo "  • Export data for reports: [future feature]"
"""

# Show recent deployments
[tasks.deployment-history]
description = "Show recent deployment records"
run = """
echo "📚 Recent Deployments:"
echo ""
ls -la deployments/checklists/*.md 2>/dev/null | tail -10 || echo "No deployment records found"
"""

# ============================================================================
# SMOKE TESTING TASKS
# ============================================================================

# Run full smoke test suite
[tasks.smoke-test]
description = "Run infrastructure smoke tests for jump-man VM"
run = "./scripts/smoke-test.sh"
env = { JUMP_HOST_IP = "192.168.10.250", JUMP_HOST_USER = "ansible" }

# Quick connectivity test
[tasks.smoke-test-quick]
description = "Quick SSH connectivity test to jump host"
run = """
echo "🔍 Testing SSH connectivity to jump-man..."
ssh -o ConnectTimeout=5 -o StrictHostKeyChecking=accept-new ansible@192.168.10.250 'hostname && uptime' && \
echo "✅ SSH connection successful" || \
echo "❌ SSH connection failed"
"""

# Test Docker functionality specifically
[tasks.smoke-test-docker]
description = "Test Docker installation and functionality"
run = """
echo "🐳 Testing Docker on jump-man..."
ssh -o ConnectTimeout=10 ansible@192.168.10.250 << 'EOF'
  echo "Docker version:"
  docker --version
  echo ""
  echo "Docker Compose version:"
  docker compose version
  echo ""
  echo "Running hello-world test:"
  docker run --rm hello-world 2>&1 | grep "Hello from Docker!" && echo "✅ Docker test passed"
  echo ""
  echo "Docker system info:"
  docker system info --format "Server Version: {{.ServerVersion}}"
  docker system info --format "Storage Driver: {{.Driver}}"
EOF
"""

# Run smoke tests after apply
[tasks.prod-deploy-and-test]
description = "Deploy production infrastructure and run smoke tests"
depends = ["prod-apply"]
run = """
echo "⏳ Waiting for VM to be fully ready..."
sleep 30
./scripts/smoke-test.sh
"""

# Mise configuration for Lunar Module - Terraform module repository
# This file manages tool versions and task automation for the project

# ============================================================================
# MISE SETTINGS
# ============================================================================

[settings]
# Automatically install tools when needed
auto_install = true
not_found_auto_install = true
jobs = 4
task_run_auto_install = true

[settings.status]
# Configure what's shown in mise status output
show_tools = true
show_env = false
truncate = true

# ============================================================================
# TOOL VERSIONS
# ============================================================================

[tools]
# Core tools
packer = "1.14.2"
terraform = "1.13.2"                # Pin to Terraform >=1.10 for Ephemeral Resources support
ansible-core = "2.19.1"
"pipx:ansible-dev-tools" = "latest"
uv = "0.8.22"
python = "3.13.7"

terraform-docs = "0.20.0" # Documentation generation
tflint = "0.59.1"         # Terraform linting

# File search and manipulation
rg = "14.1.1"  # ripgrep - fast search
fd = "10.2.0"  # Modern find alternative
eza = "0.23.0" # Modern ls alternative

# Security and verification
cosign = "2.6.0"     # Container signing and verification
pre-commit = "4.3.0" # Git hook framework
terrascan = "1.19.9" # Infrastructure security scanning

# Linting and formatting tools
yamllint = "1.37.1"                   # YAML linting
yamlfmt = "0.17.2"                    # YAML formatting
shellcheck = "0.11.0"                 # Shell script linting
markdownlint-cli2 = "0.18.1"          # Markdown linting
act = "0.2.81"
"pipx:antsibull-changelog" = "latest"
git-cliff = "2.10.1"


# ============================================================================
# PACKER TASKS
# ============================================================================

[tasks.packer-init]
description = "Initialize Packer plugins"
dir = "packer"
run = "packer init ."

[tasks.packer-validate]
description = "Validate Packer template"
dir = "packer"
run = "packer validate ubuntu-server-numbat-docker.pkr.hcl"

[tasks.packer-fmt]
description = "Format Packer template files"
dir = "packer"
run = "packer fmt -recursive ."

[tasks.packer-fmt-check]
description = "Check Packer template formatting"
dir = "packer"
run = "packer fmt -check -recursive ."

[tasks.packer-build]
description = "Build VM template with Packer"
dir = "packer"
run = "packer build ubuntu-server-numbat-docker.pkr.hcl"


[tasks.packer-build-debug]
description = "Build VM template with Packer in debug mode"
dir = "packer"
run = "PACKER_LOG=1 packer build -debug ubuntu-server-numbat-docker.pkr.hcl"


# ============================================================================
# SETUP & INITIALIZATION TASKS
# ============================================================================

# Initial project setup - run this first on a new clone
[tasks.setup]
description = "Initial project setup - install hooks, initialize Infisical, and generate docs"
depends = ["infisical-init", "hooks-install", "docs"]

# ============================================================================
# PRE-COMMIT HOOK TASKS
# ============================================================================

# Install git pre-commit hooks for automated checks
[tasks.hooks-install]
description = "Install pre-commit hooks for automated validation"
run = "pre-commit install"

# Manually run all pre-commit hooks against all files
[tasks.hooks-run]
description = "Run pre-commit hooks on all files (manual check)"
run = "pre-commit run --all-files"

# ============================================================================
# INFISICAL SECRET SCANNING TASKS
# ============================================================================

# Initialize Infisical for secret scanning and management
# Creates .infisical.json, baseline scan, and installs pre-commit hook
[tasks.infisical-init]
description = "Initialize Infisical configuration, create baseline, and install pre-commit hook"
run = """
# Check if .infisical.json already exists
if [ -f .infisical.json ]; then
  echo "⚠️  .infisical.json already exists!"
  echo "Current configuration:"
  cat .infisical.json | head -5
  echo "..."
  read -p "Do you want to overwrite it? (y/N): " -n 1 -r
  echo
  if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "❌ Skipping .infisical.json creation"
  else
    echo "📝 Overwriting .infisical.json with project configuration..."
    cat > .infisical.json << 'EOF'
{
  "workspaceId": "7b832220-24c0-45bc-a5f1-ce9794a31259",
  "defaultEnvironment": "production",
  "gitBranchToEnvironmentMapping": {
    "main": "production",
    "develop": "development",
    "staging": "staging",
    "feature/*": "development"
  }
}
EOF
    echo "✅ Updated .infisical.json"
  fi
else
  echo "📝 Creating .infisical.json with project configuration..."
  cat > .infisical.json << 'EOF'
{
  "workspaceId": "7b832220-24c0-45bc-a5f1-ce9794a31259",
  "defaultEnvironment": "production",
  "gitBranchToEnvironmentMapping": {
    "main": "production",
    "develop": "development",
    "staging": "staging",
    "feature/*": "development"
  }
}
EOF
  echo "✅ Created .infisical.json"
fi

# Check if baseline exists
if [ -f .infisical-baseline.json ]; then
  echo "⚠️  .infisical-baseline.json already exists!"
  read -p "Do you want to regenerate the baseline? (y/N): " -n 1 -r
  echo
  if [[ $REPLY =~ ^[Yy]$ ]]; then
    echo "🔍 Regenerating baseline scan..."
    infisical scan --report-path=.infisical-baseline.json
    echo "✅ Regenerated .infisical-baseline.json"
  else
    echo "✔️  Using existing baseline"
  fi
else
  echo "🔍 Creating baseline scan..."
  infisical scan --report-path=.infisical-baseline.json
  echo "✅ Created .infisical-baseline.json"
fi

echo "🪝 Installing/updating pre-commit hook..."
infisical scan install --pre-commit-hook
echo "✅ Installed Infisical pre-commit hook"

echo "🎉 Infisical setup complete!"
"""

# Run secret scanning with baseline to reduce false positives
[tasks.infisical-scan]
description = "Scan repository for secrets using baseline for known false positives"
run = "infisical scan --baseline-path=.infisical-baseline.json"

# Update the baseline with current scan results (use when adding new false positives)
[tasks.infisical-baseline-update]
description = "Update the Infisical baseline with current scan results"
run = """
echo "🔍 Updating baseline scan..."
infisical scan --report-path=.infisical-baseline.json
echo "✅ Updated .infisical-baseline.json"
echo "⚠️  Review the baseline file to ensure no real secrets were added!"
"""

# ============================================================================
# INFRASTRUCTURE SECURITY SCANNING (KICS)
# ============================================================================

# Run KICS security scan for Infrastructure as Code
[tasks.security-kics]
description = "Run KICS infrastructure security scan"
run = """
echo "🔍 Running KICS security scan..."
mkdir -p kics-results
docker run --rm -t -v "$(pwd)":/path checkmarx/kics:latest scan \
  -p /path \
  --config /path/kics.config \
  -o /path/kics-results \
  --exclude-paths .terraform,kics-results
echo "✅ KICS scan complete"
echo "📊 Results saved to kics-results/"
"""

# Run KICS scan with JSON output for CI/CD integration
[tasks.security-kics-ci]
description = "Run KICS scan with JSON output for CI integration"
run = """
echo "🔍 Running KICS security scan (CI mode)..."
mkdir -p kics-results
docker run --rm -t -v "$(pwd)":/path checkmarx/kics:latest scan \
  -p /path \
  --config /path/kics.config \
  -o /path/kics-results \
  --report-formats json \
  --exclude-paths .terraform,kics-results \
  --no-progress
echo "✅ KICS scan complete"
echo "📊 JSON results saved to kics-results/"
"""

# ============================================================================
# ACT (GITHUB ACTIONS LOCAL RUNNER) TASKS
# ============================================================================

[tasks.act-list]
description = "List all available GitHub Actions workflows"
run = "act -l"

[tasks.act-ci]
description = "Run full CI pipeline locally with act"
run = "act push"

[tasks.act-pr]
description = "Simulate a pull request CI run"
run = "act pull_request"

# ============================================================================
# FORMATTING TASKS
# ============================================================================

# Format Terraform files recursively
[tasks.fmt]
description = "Format all Terraform files recursively"
dir = "terraform"
run = "terraform fmt -recursive"

# Format YAML files
[tasks.yaml-fmt]
description = "Format all YAML files in the repository using project configuration"
run = "yamlfmt -conf .yamlfmt ."

# Check Terraform formatting without making changes (CI-friendly)
[tasks.fmt-check]
description = "Check Terraform formatting (non-mutating, shows diff)"
dir = "terraform"
run = "terraform fmt -recursive -check -diff"

# Format all supported file types
[tasks.fmt-all]
description = "Format all files (Terraform and YAML)"
depends = ["fmt", "yaml-fmt"]

# ============================================================================
# DOCUMENTATION TASKS
# ============================================================================

# Generate documentation for all Terraform modules and environments
[tasks.docs]
description = "Generate Terraform documentation for all modules and environments"
dir = "terraform"
run = "terraform-docs -c ../.terraform-docs.yml ."

# Verify documentation is up-to-date (CI-friendly)
[tasks.docs-check]
description = "Check if Terraform documentation is up-to-date"
dir = "terraform"
run = "terraform-docs -c ../.terraform-docs.yml --output-check ."

[tasks.docs-tfvars]
description = "Generate variables for tfvars"
dir = "terraform"
run = "terraform-docs tfvars hcl . --output-file terraform.tfvars"

# ============================================================================
# LINTING TASKS
# ============================================================================

# Lint shell scripts for common issues
[tasks.shellcheck]
description = "Lint all shell scripts for common issues"
run = "find scripts -name '*.sh' -exec shellcheck {} +"

# Lint YAML files for syntax and style
[tasks.yaml-lint]
description = "Lint all YAML files for syntax and style issues"
run = "yamllint ."

# Lint Markdown files for style consistency
[tasks.markdown-lint]
description = "Lint all Markdown files for style consistency"
run = "markdownlint-cli2 --config .markdownlint-cli2.jsonc '**/*.md'"

# Run TFLint on Terraform code
[tasks.tflint]
description = "Run TFLint on Terraform code"
dir = "terraform"
run = "tflint --init && tflint"

# Run all linting tasks
[tasks.lint-all]
description = "Run all linting tasks (shell, YAML, Markdown, Terraform)"
depends = ["shellcheck", "yaml-lint", "markdown-lint", "tflint"]

# ============================================================================
# TERRAFORM VALIDATION & OPERATIONS
# ============================================================================

# Initialize Terraform
[tasks.terraform-init]
description = "Initialize Terraform"
dir = "terraform"
run = "terraform init"

# Validate Terraform configuration
[tasks.terraform-validate]
description = "Validate Terraform configuration"
dir = "terraform"
run = "terraform init -backend=false -input=false >/dev/null && terraform validate"

# Plan Terraform changes
[tasks.terraform-plan]
description = "Run terraform plan"
dir = "terraform"
run = "terraform init -input=false >/dev/null 2>&1 && terraform plan"

# Apply Terraform changes (use with caution)
[tasks.terraform-apply]
description = "Apply Terraform changes"
dir = "terraform"
run = "terraform init -input=false >/dev/null 2>&1 && terraform apply"

# Format Terraform files
[tasks.terraform-fmt]
description = "Format Terraform files"
dir = "terraform"
run = "terraform fmt -recursive"

# Output Ansible inventory
[tasks.terraform-inventory]
description = "Output Ansible inventory JSON"
dir = "terraform"
run = "terraform output -json ansible_inventory > ../ansible_collections/basher83/automation_server/inventory/inventory.json && echo '✅ Inventory exported to ansible_collections/basher83/automation_server/inventory/inventory.json'"


# ============================================================================
# COMPOSITE VALIDATION TASKS
# ============================================================================

# Quick check for validation
[tasks.check]
description = "Quick validation: format, lint, and validate"
depends = ["fmt", "terraform-validate"]

# CI/CD pipeline validation
[tasks.ci-check]
description = "CI pipeline checks: all validations without modifications"
depends = ["fmt-check", "terraform-validate", "yaml-lint", "shellcheck"]

# ============================================================================
# UTILITY TASKS
# ============================================================================

# Clean Terraform cache and temporary files
[tasks.clean]
description = "Clean Terraform cache and temporary files"
run = """
echo "🧹 Cleaning Terraform cache..."
find . -type d -name ".terraform" -exec rm -rf {} + 2>/dev/null || true
find . -type f -name ".terraform.lock.hcl" -exec rm -f {} + 2>/dev/null || true
find . -type f -name "*.tfplan" -exec rm -f {} + 2>/dev/null || true
echo "✅ Cleaned Terraform cache and temporary files"
"""

# Show all available tasks with descriptions
[tasks.help]
description = "Show all available mise tasks"
run = "mise tasks"

# ============================================================================
# DEPLOYMENT PIPELINE TASKS (PACKER → TERRAFORM → ANSIBLE)
# ============================================================================


# Deploy infrastructure with Terraform
[tasks.deploy-terraform]
description = "Deploy infrastructure with Terraform and generate Ansible inventory"
dir = "terraform"
run = """
echo "🚀 Deploying infrastructure with Terraform..."
terraform init -input=false >/dev/null 2>&1
terraform apply -auto-approve

# Generate Ansible inventory
mkdir -p ../ansible_collections/basher83/automation_server/inventory
terraform output -json ansible_inventory > ../ansible_collections/basher83/automation_server/inventory/inventory.json
echo "✅ Terraform deployment completed and inventory generated"
"""

# Configure VM with Ansible
[tasks.deploy-ansible]
description = "Configure VM with Ansible using inventory from Terraform"
dir = "ansible_collections/basher83/automation_server"
run = """
echo "⚙️ Configuring VM with Ansible..."

# Test connectivity
echo "📋 Testing Ansible connectivity..."
ansible all -i inventory/inventory.json -m ping

# Run site playbook
if [ -f "playbooks/site.yml" ]; then
  echo "🎯 Running site configuration playbook..."
  ansible-playbook -i inventory/inventory.json playbooks/site.yml
else
  echo "✅ Connectivity test successful"
fi
"""

# Complete deployment pipeline
[tasks.deploy-full]
description = "Run complete deployment pipeline: Terraform → Ansible"
depends = ["deploy-terraform", "deploy-ansible"]
run = """
echo "🎉 Complete deployment pipeline finished!"
echo "🔍 Run smoke tests: mise run smoke-test"
"""

[tasks.smoke-test]
description = "Run infrastructure smoke tests for jump-man VM"
run = "./scripts/smoke-test.sh"
env = { JUMP_HOST_IP = "192.168.10.250", JUMP_HOST_USER = "ansible" }

# Quick connectivity test
[tasks.smoke-test-quick]
description = "Quick SSH connectivity test to jump host"
run = """
echo "🔍 Testing SSH connectivity to jump-man..."
ssh -o ConnectTimeout=5 -o StrictHostKeyChecking=accept-new ansible@192.168.10.250 'hostname && uptime' && \
echo "✅ SSH connection successful" || \
echo "❌ SSH connection failed"
"""

# Test Docker functionality specifically
[tasks.smoke-test-docker]
description = "Test Docker installation and functionality"
run = """
echo "🐳 Testing Docker on jump-man..."
ssh -o ConnectTimeout=10 ansible@192.168.10.250 << 'EOF'
  echo "Docker version:"
  docker --version
  echo ""
  echo "Docker Compose version:"
  docker compose version
  echo ""
  echo "Running hello-world test:"
  docker run --rm hello-world 2>&1 | grep "Hello from Docker!" && echo "✅ Docker test passed"
  echo ""
  echo "Docker system info:"
  docker system info --format "Server Version: {{.ServerVersion}}"
  docker system info --format "Storage Driver: {{.Driver}}"
EOF
"""

[tasks.changelog]
description = "Update changelog using git-cliff"
run = "git-cliff -o CHANGELOG.md"

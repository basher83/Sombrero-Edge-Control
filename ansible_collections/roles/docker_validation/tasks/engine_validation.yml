---
#SPDX-License-Identifier: MIT-0
# Docker Engine validation tasks

- name: Get Docker host information
  community.docker.docker_host_info:
  register: docker_host_info

- name: Validate Docker daemon is accessible
  block:
    - name: Check Docker daemon connectivity
      assert:
        that:
          - docker_host_info.host_info is defined
          - docker_host_info.host_info.Name is defined
        fail_msg: "Docker daemon is not accessible or responding"
        success_msg: "Docker daemon is accessible"

    - name: Record Docker daemon connectivity result
      set_fact:
        docker_validation_results: "{{ docker_validation_results | combine({'daemon_connectivity': {'status': 'PASS', 'host_name': docker_host_info.host_info.Name | default('Unknown')}}) }}"
        docker_validation_passed_count: "{{ docker_validation_passed_count + 1 }}"

  rescue:
    - name: Record Docker daemon connectivity failure
      set_fact:
        docker_validation_results: "{{ docker_validation_results | combine({'daemon_connectivity': {'status': 'FAIL', 'error': ansible_failed_result.msg}}) }}"
        docker_validation_failed_count: "{{ docker_validation_failed_count + 1 }}"

    - name: Debug daemon connectivity failure
      debug:
        msg: "Docker daemon connectivity failed: {{ ansible_failed_result.msg }}"
      when: validation_config.collect_debug_info | default(true)

- name: Validate Docker version compatibility
  block:
    - name: Check Docker version meets minimum requirements
      assert:
        that:
          - docker_host_info.host_info.ServerVersion is version(docker_min_version, '>=')
        fail_msg: "Docker version {{ docker_host_info.host_info.ServerVersion }} does not meet minimum requirement {{ docker_min_version }}"
        success_msg: "Docker version {{ docker_host_info.host_info.ServerVersion }} meets requirements"
      when: docker_min_version != ""

    - name: Check Docker version within maximum limit
      assert:
        that:
          - docker_host_info.host_info.ServerVersion is version(docker_max_version, '<=')
        fail_msg: "Docker version {{ docker_host_info.host_info.ServerVersion }} exceeds maximum allowed {{ docker_max_version }}"
        success_msg: "Docker version {{ docker_host_info.host_info.ServerVersion }} within allowed range"
      when: docker_max_version != ""

    - name: Record Docker version validation result
      set_fact:
        docker_validation_results: "{{ docker_validation_results | combine({'version_compatibility': {'status': 'PASS', 'version': docker_host_info.host_info.ServerVersion, 'min_required': docker_min_version}}) }}"
        docker_validation_passed_count: "{{ docker_validation_passed_count + 1 }}"

  rescue:
    - name: Record Docker version validation failure
      set_fact:
        docker_validation_results: "{{ docker_validation_results | combine({'version_compatibility': {'status': 'FAIL', 'version': docker_host_info.host_info.ServerVersion | default('Unknown'), 'error': ansible_failed_result.msg}}) }}"
        docker_validation_failed_count: "{{ docker_validation_failed_count + 1 }}"

    - name: Debug version validation failure
      debug:
        msg: "Docker version validation failed: {{ ansible_failed_result.msg }}"
      when: validation_config.collect_debug_info | default(true)

- name: Validate Docker storage driver
  block:
    - name: Check storage driver configuration
      set_fact:
        docker_storage_driver: "{{ docker_host_info.host_info.Driver }}"

    - name: Validate storage driver is in whitelist
      assert:
        that:
          - docker_storage_driver in daemon_config_validation.storage_driver_whitelist
        fail_msg: "Storage driver '{{ docker_storage_driver }}' not in whitelist: {{ daemon_config_validation.storage_driver_whitelist }}"
        success_msg: "Storage driver '{{ docker_storage_driver }}' is approved"
      when: daemon_config_validation.storage_driver_whitelist | length > 0

    - name: Record storage driver validation result
      set_fact:
        docker_validation_results: "{{ docker_validation_results | combine({'storage_driver': {'status': 'PASS', 'driver': docker_storage_driver}}) }}"
        docker_validation_passed_count: "{{ docker_validation_passed_count + 1 }}"

  rescue:
    - name: Record storage driver validation failure
      set_fact:
        docker_validation_results: "{{ docker_validation_results | combine({'storage_driver': {'status': 'FAIL', 'driver': docker_storage_driver | default('Unknown'), 'error': ansible_failed_result.msg}}) }}"
        docker_validation_failed_count: "{{ docker_validation_failed_count + 1 }}"

    - name: Debug storage driver validation failure
      debug:
        msg: "Storage driver validation failed: {{ ansible_failed_result.msg }}"
      when: validation_config.collect_debug_info | default(true)

- name: Validate Docker disk space
  block:
    - name: Get Docker root directory info
      stat:
        path: "{{ docker_host_info.host_info.DockerRootDir }}"
      register: docker_root_stat

    - name: Calculate available disk space
      set_fact:
        docker_disk_available_gb: "{{ (ansible_mounts | selectattr('mount', 'equalto', docker_root_stat.stat.path | dirname) | map(attribute='size_available') | first | default(0) / 1024 / 1024 / 1024) | round(2) }}"
      when: ansible_mounts is defined

    - name: Validate sufficient disk space available
      assert:
        that:
          - docker_disk_available_gb | float >= docker_min_disk_space_gb
        fail_msg: "Insufficient disk space: {{ docker_disk_available_gb }}GB available (minimum: {{ docker_min_disk_space_gb }}GB)"
        success_msg: "Sufficient disk space: {{ docker_disk_available_gb }}GB available"
      when: ansible_mounts is defined

    - name: Record disk space validation result
      set_fact:
        docker_validation_results: "{{ docker_validation_results | combine({'disk_space': {'status': 'PASS', 'available_gb': docker_disk_available_gb, 'root_dir': docker_host_info.host_info.DockerRootDir}}) }}"
        docker_validation_passed_count: "{{ docker_validation_passed_count + 1 }}"
      when: ansible_mounts is defined

    - name: Skip disk space validation if mount info unavailable
      set_fact:
        docker_validation_results: "{{ docker_validation_results | combine({'disk_space': {'status': 'SKIP', 'reason': 'Mount information not available on this platform'}}) }}"
      when: ansible_mounts is not defined

  rescue:
    - name: Record disk space validation failure
      set_fact:
        docker_validation_results: "{{ docker_validation_results | combine({'disk_space': {'status': 'FAIL', 'available_gb': docker_disk_available_gb | default('Unknown'), 'error': ansible_failed_result.msg}}) }}"
        docker_validation_failed_count: "{{ docker_validation_failed_count + 1 }}"

    - name: Debug disk space validation failure
      debug:
        msg: "Disk space validation failed: {{ ansible_failed_result.msg }}"
      when: validation_config.collect_debug_info | default(true)

- name: Validate Docker container count limits
  block:
    - name: Get container count
      set_fact:
        docker_container_count: "{{ docker_host_info.host_info.Containers | default(0) }}"

    - name: Validate container count within limits
      assert:
        that:
          - docker_container_count | int <= docker_max_container_count
        fail_msg: "Too many containers: {{ docker_container_count }} (maximum: {{ docker_max_container_count }})"
        success_msg: "Container count OK: {{ docker_container_count }}/{{ docker_max_container_count }}"

    - name: Record container count validation result
      set_fact:
        docker_validation_results: "{{ docker_validation_results | combine({'container_count': {'status': 'PASS', 'current': docker_container_count, 'limit': docker_max_container_count}}) }}"
        docker_validation_passed_count: "{{ docker_validation_passed_count + 1 }}"

  rescue:
    - name: Record container count validation failure
      set_fact:
        docker_validation_results: "{{ docker_validation_results | combine({'container_count': {'status': 'FAIL', 'current': docker_container_count | default('Unknown'), 'limit': docker_max_container_count, 'error': ansible_failed_result.msg}}) }}"
        docker_validation_failed_count: "{{ docker_validation_failed_count + 1 }}"

    - name: Debug container count validation failure
      debug:
        msg: "Container count validation failed: {{ ansible_failed_result.msg }}"
      when: validation_config.collect_debug_info | default(true)

- name: Display Docker engine validation summary
  debug:
    msg:
      - "Docker Engine Validation Results:"
      - "  Daemon Connectivity: {{ docker_validation_results.daemon_connectivity.status | default('SKIP') }}"
      - "  Version Compatibility: {{ docker_validation_results.version_compatibility.status | default('SKIP') }}"
      - "  Storage Driver: {{ docker_validation_results.storage_driver.status | default('SKIP') }}"
      - "  Disk Space: {{ docker_validation_results.disk_space.status | default('SKIP') }}"
      - "  Container Count: {{ docker_validation_results.container_count.status | default('SKIP') }}"
  when: reporting.log_level in ['debug', 'info']

---
# Kernel Hardening Tasks - sysctl configuration

- name: Backup current sysctl configuration
  ansible.builtin.copy:
    src: /etc/sysctl.conf
    dest: /etc/sysctl.conf.backup.{{ ansible_date_time.epoch }}
    remote_src: true
    owner: root
    group: root
    mode: '0644'
  changed_when: false

- name: Create custom sysctl configuration file
  ansible.builtin.file:
    path: /etc/sysctl.d/99-security-hardening.conf
    state: touch
    owner: root
    group: root
    mode: '0644'
    modification_time: preserve
    access_time: preserve

- name: Apply kernel hardening parameters
  ansible.posix.sysctl:
    name: "{{ item.key }}"
    value: "{{ item.value }}"
    state: present
    sysctl_file: /etc/sysctl.d/99-security-hardening.conf
    reload: true
  loop: "{{ security_sysctl_settings | dict2items }}"
  when: security_kernel_hardening_enabled
  failed_when: false
  notify: reload sysctl

- name: Disable IPv6 if not needed
  ansible.posix.sysctl:
    name: "{{ item }}"
    value: "1"
    state: present
    sysctl_file: /etc/sysctl.d/99-disable-ipv6.conf
    reload: true
  loop:
    - net.ipv6.conf.all.disable_ipv6
    - net.ipv6.conf.default.disable_ipv6
    - net.ipv6.conf.lo.disable_ipv6
  when:
    - security_kernel_hardening_enabled
    - not (ansible_all_ipv6_addresses | length > 0)
  notify: reload sysctl

- name: Configure kernel module blacklist
  ansible.builtin.copy:
    content: |
      # Blacklist rare network protocols
      install dccp /bin/true
      install sctp /bin/true
      install rds /bin/true
      install tipc /bin/true

      # Blacklist filesystems
      install cramfs /bin/true
      install freevxfs /bin/true
      install jffs2 /bin/true
      install hfs /bin/true
      install hfsplus /bin/true
      install squashfs /bin/true
      install udf /bin/true
      install vfat /bin/true

      # Blacklist network protocols
      install bluetooth /bin/true
      install btusb /bin/true

      # Blacklist USB storage (optional - uncomment if needed)
      # install usb-storage /bin/true
    dest: /etc/modprobe.d/security-blacklist.conf
    owner: root
    group: root
    mode: '0644'

- name: Set kernel panic parameters
  ansible.builtin.lineinfile:
    path: /etc/sysctl.d/99-security-hardening.conf
    regexp: "^{{ item.key }}="
    line: "{{ item.key }}={{ item.value }}"
    state: present
  loop:
    - { key: "kernel.panic", value: "10" }
    - { key: "kernel.panic_on_oops", value: "1" }
  when: security_kernel_hardening_enabled
  notify: reload sysctl

- name: Restrict kernel pointers in proc
  ansible.builtin.lineinfile:
    path: /etc/sysctl.d/99-security-hardening.conf
    regexp: "^kernel.kptr_restrict="
    line: "kernel.kptr_restrict=2"
    state: present
  when: security_kernel_hardening_enabled
  notify: reload sysctl

- name: Enable execshield (if supported)
  ansible.posix.sysctl:
    name: kernel.exec-shield
    value: "1"
    state: present
    sysctl_file: /etc/sysctl.d/99-security-hardening.conf
  when: security_kernel_hardening_enabled
  failed_when: false
  notify: reload sysctl

- name: Restrict core dumps
  block:
    - name: Set hard limit for core dumps
      ansible.builtin.lineinfile:
        path: /etc/security/limits.conf
        line: "* hard core 0"
        state: present

    - name: Set soft limit for core dumps
      ansible.builtin.lineinfile:
        path: /etc/security/limits.conf
        line: "* soft core 0"
        state: present

    - name: Disable core dumps in sysctl
      ansible.posix.sysctl:
        name: fs.suid_dumpable
        value: "0"
        state: present
        sysctl_file: /etc/sysctl.d/99-security-hardening.conf
        reload: true
  when: security_kernel_hardening_enabled
  notify: reload sysctl

- name: Set process limits
  ansible.builtin.lineinfile:
    path: /etc/security/limits.conf
    line: "{{ item }}"
    state: present
  loop:
    - "* soft nproc 1024"
    - "* hard nproc 1024"
    - "root soft nproc unlimited"
    - "root hard nproc unlimited"
  when: security_kernel_hardening_enabled

- name: Ensure kernel parameters are loaded at boot
  ansible.builtin.lineinfile:
    path: /etc/default/grub
    regexp: '^GRUB_CMDLINE_LINUX_DEFAULT='
    line: 'GRUB_CMDLINE_LINUX_DEFAULT="quiet splash audit=1"'
    state: present
  register: grub_config
  when: security_kernel_hardening_enabled

- name: Update GRUB if configuration changed
  ansible.builtin.command: update-grub
  when:
    - security_kernel_hardening_enabled
    - grub_config.changed
  changed_when: grub_config.changed

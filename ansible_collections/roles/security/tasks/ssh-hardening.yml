---
# SSH Hardening Tasks - CIS Benchmark Aligned

- name: Ensure SSH is installed
  ansible.builtin.package:
    name: openssh-server
    state: present

- name: Backup original SSH configuration
  ansible.builtin.copy:
    src: /etc/ssh/sshd_config
    dest: /etc/ssh/sshd_config.backup.{{ ansible_date_time.epoch }}
    remote_src: true
    owner: root
    group: root
    mode: '0600'
  changed_when: false

- name: Create SSH banner file
  ansible.builtin.copy:
    content: |
      ##############################################################
      #                                                            #
      #  Unauthorized access to this system is strictly prohibited #
      #  All access attempts are logged and monitored             #
      #  Violators will be prosecuted to the full extent of law   #
      #                                                            #
      ##############################################################
    dest: "{{ security_ssh_banner }}"
    owner: root
    group: root
    mode: '0644'

- name: Configure SSH daemon
  ansible.builtin.lineinfile:
    path: /etc/ssh/sshd_config
    regexp: "^#?{{ item.key }}\\s"
    line: "{{ item.key }} {{ item.value }}"
    state: present
    validate: "sshd -t -f %s"
  loop:
    - { key: "Port", value: "{{ security_ssh_port }}" }
    - { key: "Protocol", value: "{{ security_ssh_protocol }}" }
    - { key: "PermitRootLogin", value: "{{ security_ssh_permit_root_login }}" }
    - { key: "PubkeyAuthentication", value: "{{ security_ssh_pubkey_authentication }}" }
    - { key: "PasswordAuthentication", value: "{{ security_ssh_password_authentication }}" }
    - { key: "PermitEmptyPasswords", value: "{{ security_ssh_permit_empty_passwords }}" }
    - { key: "ChallengeResponseAuthentication", value: "{{ security_ssh_challenge_response_auth }}" }
    - { key: "GSSAPIAuthentication", value: "{{ security_ssh_gss_api_authentication }}" }
    - { key: "X11Forwarding", value: "{{ security_ssh_x11_forwarding }}" }
    - { key: "MaxAuthTries", value: "{{ security_ssh_max_auth_tries }}" }
    - { key: "MaxSessions", value: "{{ security_ssh_max_sessions }}" }
    - { key: "ClientAliveInterval", value: "{{ security_ssh_client_alive_interval }}" }
    - { key: "ClientAliveCountMax", value: "{{ security_ssh_client_alive_count_max }}" }
    - { key: "LoginGraceTime", value: "{{ security_ssh_login_grace_time }}" }
    - { key: "Banner", value: "{{ security_ssh_banner }}" }
    - { key: "UsePAM", value: "{{ security_ssh_use_pam }}" }
    - { key: "StrictModes", value: "{{ security_ssh_strict_modes }}" }
    - { key: "TCPKeepAlive", value: "{{ security_ssh_tcp_keep_alive }}" }
    - { key: "Compression", value: "{{ security_ssh_compression }}" }
  notify: restart sshd

- name: Configure SSH allowed users
  ansible.builtin.lineinfile:
    path: /etc/ssh/sshd_config
    regexp: "^#?AllowUsers\\s"
    line: "AllowUsers {{ security_ssh_allow_users | join(' ') }}"
    state: "{{ 'present' if security_ssh_allow_users else 'absent' }}"
    validate: "sshd -t -f %s"
  when: security_ssh_allow_users | length > 0
  notify: restart sshd

- name: Configure SSH denied users
  ansible.builtin.lineinfile:
    path: /etc/ssh/sshd_config
    regexp: "^#?DenyUsers\\s"
    line: "DenyUsers {{ security_ssh_deny_users | join(' ') }}"
    state: "{{ 'present' if security_ssh_deny_users else 'absent' }}"
    validate: "sshd -t -f %s"
  when: security_ssh_deny_users | length > 0
  notify: restart sshd

- name: Configure SSH allowed groups
  ansible.builtin.lineinfile:
    path: /etc/ssh/sshd_config
    regexp: "^#?AllowGroups\\s"
    line: "AllowGroups {{ security_ssh_allow_groups | join(' ') }}"
    state: "{{ 'present' if security_ssh_allow_groups else 'absent' }}"
    validate: "sshd -t -f %s"
  when: security_ssh_allow_groups | length > 0
  notify: restart sshd

- name: Configure SSH denied groups
  ansible.builtin.lineinfile:
    path: /etc/ssh/sshd_config
    regexp: "^#?DenyGroups\\s"
    line: "DenyGroups {{ security_ssh_deny_groups | join(' ') }}"
    state: "{{ 'present' if security_ssh_deny_groups else 'absent' }}"
    validate: "sshd -t -f %s"
  when: security_ssh_deny_groups | length > 0
  notify: restart sshd

- name: Configure SSH ciphers
  ansible.builtin.lineinfile:
    path: /etc/ssh/sshd_config
    regexp: "^#?Ciphers\\s"
    line: "Ciphers {{ security_ssh_allowed_ciphers }}"
    state: present
    validate: "sshd -t -f %s"
  notify: restart sshd

- name: Configure SSH MACs
  ansible.builtin.lineinfile:
    path: /etc/ssh/sshd_config
    regexp: "^#?MACs\\s"
    line: "MACs {{ security_ssh_allowed_macs }}"
    state: present
    validate: "sshd -t -f %s"
  notify: restart sshd

- name: Configure SSH key exchange algorithms
  ansible.builtin.lineinfile:
    path: /etc/ssh/sshd_config
    regexp: "^#?KexAlgorithms\\s"
    line: "KexAlgorithms {{ security_ssh_allowed_kex_algorithms }}"
    state: present
    validate: "sshd -t -f %s"
  notify: restart sshd

- name: Configure SSH host key algorithms
  ansible.builtin.lineinfile:
    path: /etc/ssh/sshd_config
    regexp: "^#?HostKeyAlgorithms\\s"
    line: "HostKeyAlgorithms {{ security_ssh_host_key_algorithms }}"
    state: present
    validate: "sshd -t -f %s"
  notify: restart sshd

- name: Remove insecure SSH host keys
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - /etc/ssh/ssh_host_dsa_key
    - /etc/ssh/ssh_host_dsa_key.pub
    - /etc/ssh/ssh_host_ecdsa_key
    - /etc/ssh/ssh_host_ecdsa_key.pub

- name: Ensure SSH host keys have correct permissions
  ansible.builtin.file:
    path: "{{ item.path }}"
    owner: root
    group: root
    mode: "{{ item.mode }}"
  loop:
    - { path: "/etc/ssh/ssh_host_rsa_key", mode: "0600" }
    - { path: "/etc/ssh/ssh_host_rsa_key.pub", mode: "0644" }
    - { path: "/etc/ssh/ssh_host_ed25519_key", mode: "0600" }
    - { path: "/etc/ssh/ssh_host_ed25519_key.pub", mode: "0644" }
  failed_when: false

- name: Set SSH daemon to start on boot
  ansible.builtin.systemd:
    name: sshd
    enabled: true
    state: started

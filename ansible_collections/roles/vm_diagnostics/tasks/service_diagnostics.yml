---
#SPDX-License-Identifier: MIT-0
# Service Diagnostics Tasks

- name: Service Status Analysis
  block:
    - name: Gather service facts
      service_facts:

    - name: Get detailed status for monitored services
      systemd:
        name: "{{ item }}"
      register: service_status_detail
      failed_when: false
      loop: "{{ monitored_services }}"
      become: true

    - name: Collect systemd service logs for monitored services
      shell: journalctl -u {{ item }} --no-pager -n 20
      register: service_logs
      changed_when: false
      failed_when: false
      loop: "{{ monitored_services }}"
      become: true

    - name: Analyze service status results
      set_fact:
        running_services: "{{ service_status_detail.results | selectattr('state', 'defined') | selectattr('state', 'equalto', 'started') | list | length }}"
        total_monitored: "{{ monitored_services | length }}"
        failed_services: "{{ service_status_detail.results | selectattr('state', 'defined') | selectattr('state', 'equalto', 'failed') | map(attribute='name') | list }}"

    - name: Record service status results
      set_fact:
        vm_diagnostic_results: "{{ vm_diagnostic_results | combine({
          'service_status_analysis': {
            'status': 'PASS' if failed_services | length == 0 else 'FAIL',
            'monitored_services': total_monitored,
            'running_services': running_services,
            'failed_services': failed_services,
            'service_health_rate': ((running_services / total_monitored) * 100) | round(2) if total_monitored > 0 else 100,
            'detailed_status': service_status_detail.results | default([]) | map(attribute='name') | zip(service_status_detail.results | map(attribute='state') | map('default', 'Unknown')) | list
          }
        }) }}"

    - name: Update diagnostic counters for services
      set_fact:
        vm_diagnostic_passed_count: "{{ vm_diagnostic_passed_count + (1 if failed_services | length == 0 else 0) }}"
        vm_diagnostic_failed_count: "{{ vm_diagnostic_failed_count + (1 if failed_services | length > 0 else 0) }}"

  rescue:
    - name: Record service status failure
      set_fact:
        vm_diagnostic_results: "{{ vm_diagnostic_results | combine({
          'service_status_analysis': {
            'status': 'FAIL',
            'error': ansible_failed_result.msg | default('Service status analysis failed')
          }
        }) }}"
        vm_diagnostic_failed_count: "{{ vm_diagnostic_failed_count + 1 }}"

  when: service_diagnostics.status_analysis | bool

- name: Service Dependency Analysis
  block:
    - name: Check systemd dependencies for monitored services
      shell: systemctl list-dependencies {{ item }} --plain
      register: service_dependencies
      changed_when: false
      failed_when: false
      loop: "{{ monitored_services }}"
      become: true

    - name: Analyze service dependencies
      set_fact:
        dependency_analysis: "{{ service_dependencies.results | default([]) | map(attribute='stdout_lines') | map('length') | list }}"

    - name: Record dependency analysis results
      set_fact:
        vm_diagnostic_results: "{{ vm_diagnostic_results | combine({
          'service_dependency_analysis': {
            'status': 'PASS',
            'services_analyzed': monitored_services | length,
            'dependency_details': service_dependencies.results | default([]) | map(attribute='item') | zip(dependency_analysis) | list,
            'total_dependencies': dependency_analysis | sum | default(0)
          }
        }) }}"
        vm_diagnostic_passed_count: "{{ vm_diagnostic_passed_count + 1 }}"

  rescue:
    - name: Record dependency analysis failure
      set_fact:
        vm_diagnostic_results: "{{ vm_diagnostic_results | combine({
          'service_dependency_analysis': {
            'status': 'FAIL',
            'error': ansible_failed_result.msg | default('Service dependency analysis failed')
          }
        }) }}"
        vm_diagnostic_failed_count: "{{ vm_diagnostic_failed_count + 1 }}"

  when: service_diagnostics.dependency_analysis | bool

- name: Docker Service Integration Analysis
  block:
    - name: Check Docker service status
      systemd:
        name: docker
      register: docker_service_status
      failed_when: false
      become: true

    - name: Get Docker container status (if Docker is running)
      community.docker.docker_host_info:
      register: docker_host_info
      failed_when: false
      when: docker_service_status.state | default('') == 'started'

    - name: Get running Docker containers
      community.docker.docker_container_info:
        name: "{{ ansible_hostname }}"  # This will fail but we catch it
      register: docker_containers
      failed_when: false
      when: docker_service_status.state | default('') == 'started'

    - name: List all Docker containers
      shell: docker ps -a --format "table {{.Names}}\t{{.Status}}\t{{.Image}}"
      register: docker_container_list
      changed_when: false
      failed_when: false
      when: docker_service_status.state | default('') == 'started'
      become: true

    - name: Analyze Docker integration
      set_fact:
        docker_analysis:
          docker_service_running: "{{ docker_service_status.state | default('') == 'started' }}"
          docker_daemon_accessible: "{{ docker_host_info is defined and docker_host_info.host_info is defined }}"
          container_count: "{{ docker_host_info.host_info.Containers | default(0) if docker_host_info is defined else 0 }}"
          running_container_count: "{{ docker_host_info.host_info.ContainersRunning | default(0) if docker_host_info is defined else 0 }}"

    - name: Record Docker integration results
      set_fact:
        vm_diagnostic_results: "{{ vm_diagnostic_results | combine({
          'docker_service_integration': {
            'status': 'PASS' if docker_analysis.docker_service_running else 'WARN',
            'docker_service_running': docker_analysis.docker_service_running,
            'docker_daemon_accessible': docker_analysis.docker_daemon_accessible,
            'total_containers': docker_analysis.container_count,
            'running_containers': docker_analysis.running_container_count,
            'container_list': docker_container_list.stdout_lines | default([]) if docker_analysis.docker_service_running else []
          }
        }) }}"
        vm_diagnostic_passed_count: "{{ vm_diagnostic_passed_count + 1 }}"

  rescue:
    - name: Record Docker integration failure
      set_fact:
        vm_diagnostic_results: "{{ vm_diagnostic_results | combine({
          'docker_service_integration': {
            'status': 'FAIL',
            'error': ansible_failed_result.msg | default('Docker service integration analysis failed')
          }
        }) }}"
        vm_diagnostic_failed_count: "{{ vm_diagnostic_failed_count + 1 }}"

  when: service_diagnostics.docker_integration | bool

- name: Service Configuration Validation
  block:
    - name: Check service configuration files exist
      stat:
        path: "/etc/systemd/system/{{ item }}.service"
      register: service_config_files
      loop: "{{ monitored_services }}"

    - name: Check service override configurations
      find:
        paths: "/etc/systemd/system/{{ item }}.service.d/"
        patterns: "*.conf"
      register: service_overrides
      loop: "{{ monitored_services }}"

    - name: Analyze service configurations
      set_fact:
        config_analysis:
          services_with_configs: "{{ service_config_files.results | selectattr('stat.exists', 'equalto', true) | list | length }}"
          services_with_overrides: "{{ service_overrides.results | selectattr('files', 'defined') | selectattr('files', '!=', []) | list | length }}"

    - name: Record configuration validation results
      set_fact:
        vm_diagnostic_results: "{{ vm_diagnostic_results | combine({
          'service_configuration_validation': {
            'status': 'PASS',
            'monitored_services': monitored_services | length,
            'services_with_custom_configs': config_analysis.services_with_configs,
            'services_with_overrides': config_analysis.services_with_overrides,
            'configuration_coverage': ((config_analysis.services_with_configs / monitored_services | length) * 100) | round(2) if monitored_services | length > 0 else 0
          }
        }) }}"
        vm_diagnostic_passed_count: "{{ vm_diagnostic_passed_count + 1 }}"

  rescue:
    - name: Record configuration validation failure
      set_fact:
        vm_diagnostic_results: "{{ vm_diagnostic_results | combine({
          'service_configuration_validation': {
            'status': 'FAIL',
            'error': ansible_failed_result.msg | default('Service configuration validation failed')
          }
        }) }}"
        vm_diagnostic_failed_count: "{{ vm_diagnostic_failed_count + 1 }}"

  when: service_diagnostics.configuration_validation | bool

- name: Service Performance Monitoring
  block:
    - name: Get service resource usage via systemctl
      shell: systemctl show {{ item }} --property=MainPID,MemoryCurrent,CPUUsageNSec
      register: service_resource_usage
      changed_when: false
      failed_when: false
      loop: "{{ monitored_services }}"
      become: true

    - name: Get process information for service PIDs
      shell: |
        for service in {{ monitored_services | join(' ') }}; do
          pid=$(systemctl show $service --property=MainPID --value)
          if [ "$pid" != "0" ] && [ "$pid" != "" ]; then
            ps -p $pid -o pid,pcpu,pmem,comm --no-headers 2>/dev/null || echo "$service: No process found"
          else
            echo "$service: No main PID"
          fi
        done
      register: service_process_info
      changed_when: false
      failed_when: false
      become: true

    - name: Analyze service performance
      set_fact:
        performance_analysis:
          services_monitored: "{{ monitored_services | length }}"
          resource_data_available: "{{ service_resource_usage.results | selectattr('rc', 'equalto', 0) | list | length }}"

    - name: Record service performance results
      set_fact:
        vm_diagnostic_results: "{{ vm_diagnostic_results | combine({
          'service_performance_monitoring': {
            'status': 'PASS',
            'services_monitored': performance_analysis.services_monitored,
            'resource_data_available': performance_analysis.resource_data_available,
            'resource_usage': service_resource_usage.results | default([]) | map(attribute='stdout_lines') | list,
            'process_info': service_process_info.stdout_lines | default([]),
            'note': 'Use dedicated monitoring tools for detailed performance metrics'
          }
        }) }}"
        vm_diagnostic_passed_count: "{{ vm_diagnostic_passed_count + 1 }}"

  rescue:
    - name: Record service performance failure
      set_fact:
        vm_diagnostic_results: "{{ vm_diagnostic_results | combine({
          'service_performance_monitoring': {
            'status': 'FAIL',
            'error': ansible_failed_result.msg | default('Service performance monitoring failed')
          }
        }) }}"
        vm_diagnostic_failed_count: "{{ vm_diagnostic_failed_count + 1 }}"

  when: service_diagnostics.performance_monitoring | bool

- name: Service Restart Analysis
  block:
    - name: Check service restart policies
      shell: systemctl show {{ item }} --property=Restart,RestartSec
      register: service_restart_policies
      changed_when: false
      failed_when: false
      loop: "{{ monitored_services }}"
      become: true

    - name: Get service failure information
      shell: systemctl show {{ item }} --property=NRestarts,Result,ExecMainStatus
      register: service_failure_info
      changed_when: false
      failed_when: false
      loop: "{{ monitored_services }}"
      become: true

    - name: Analyze restart policies
      set_fact:
        restart_analysis:
          services_with_restart_policy: "{{ service_restart_policies.results | selectattr('stdout', 'search', 'Restart=') | selectattr('stdout', 'search', '(?!Restart=no)') | list | length }}"
          services_with_failures: "{{ service_failure_info.results | selectattr('stdout', 'search', 'NRestarts=[1-9]') | list | length }}"

    - name: Record restart analysis results
      set_fact:
        vm_diagnostic_results: "{{ vm_diagnostic_results | combine({
          'service_restart_analysis': {
            'status': 'PASS' if restart_analysis.services_with_failures == 0 else 'WARN',
            'monitored_services': monitored_services | length,
            'services_with_restart_policies': restart_analysis.services_with_restart_policy,
            'services_with_recent_failures': restart_analysis.services_with_failures,
            'restart_policy_details': service_restart_policies.results | default([]) | map(attribute='stdout') | list,
            'failure_details': service_failure_info.results | default([]) | map(attribute='stdout') | list
          }
        }) }}"
        vm_diagnostic_passed_count: "{{ vm_diagnostic_passed_count + 1 }}"

  rescue:
    - name: Record restart analysis failure
      set_fact:
        vm_diagnostic_results: "{{ vm_diagnostic_results | combine({
          'service_restart_analysis': {
            'status': 'FAIL',
            'error': ansible_failed_result.msg | default('Service restart analysis failed')
          }
        }) }}"
        vm_diagnostic_failed_count: "{{ vm_diagnostic_failed_count + 1 }}"

  when: service_diagnostics.restart_analysis | bool

- name: Write service diagnostics to file
  copy:
    content: "{{ vm_diagnostic_results
                | dict2items
                | selectattr('key', 'match', '^service_')
                | items2dict
                | to_nice_json }}"
    dest: "{{ diagnostic_output_dir }}/service_diagnostics.json"
    mode: '0644'
  when: (vm_diagnostic_results | dict2items | selectattr('key', 'match', '^service_') | list | length) > 0

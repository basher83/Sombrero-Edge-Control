---
#SPDX-License-Identifier: MIT-0
# Troubleshooting Automation Tasks

- name: Common Issue Detection Workflows
  block:
    - name: Initialize troubleshooting analysis
      set_fact:
        issues_detected: []
        remediation_actions: []

    - name: Check for common VM provisioning issues
      block:
        - name: Detect cloud-init failures
          shell: |
            if [ -f "/var/log/cloud-init.log" ]; then
              if grep -q -i "error\|fail\|timeout" /var/log/cloud-init.log; then
                echo "cloud-init-errors"
              fi
            fi
            if [ -f "/var/log/cloud-init-output.log" ]; then
              if grep -q -i "error\|fail\|dpkg.*error" /var/log/cloud-init-output.log; then
                echo "cloud-init-package-errors"
              fi
            fi
          register: cloud_init_issues
          changed_when: false
          failed_when: false

        - name: Add cloud-init issues to detection list
          set_fact:
            issues_detected: "{{ issues_detected + ['Cloud-init provisioning errors detected'] }}"
            remediation_actions: "{{ remediation_actions + ['Review cloud-init logs and re-run provisioning'] }}"
          when: cloud_init_issues.stdout_lines | length > 0

    - name: Check for service startup issues
      block:
        - name: Detect failed services from previous analysis
          set_fact:
            failed_services_list: "{{ vm_diagnostic_results.service_status_analysis.failed_services | default([]) }}"
          when: vm_diagnostic_results.service_status_analysis is defined

        - name: Add service issues to detection list
          set_fact:
            issues_detected: "{{ issues_detected + ['Critical service failures detected: ' + (failed_services_list | join(', '))] }}"
            remediation_actions: "{{ remediation_actions + ['Investigate and restart failed services: ' + (failed_services_list | join(', '))] }}"
          when:
            - failed_services_list is defined
            - failed_services_list | length > 0

    - name: Check for resource exhaustion issues
      block:
        - name: Detect high resource usage from previous analysis
          set_fact:
            resource_issues: []

        - name: Check memory exhaustion
          set_fact:
            resource_issues: "{{ resource_issues + ['High memory usage: ' + (memory_usage_percent | string) + '%'] }}"
          when:
            - memory_usage_percent is defined
            - memory_usage_percent | float > 90

        - name: Check disk space exhaustion
          set_fact:
            resource_issues: "{{ resource_issues + ['Low disk space: ' + (root_disk_usage | string) + '% used'] }}"
          when:
            - root_disk_usage is defined
            - root_disk_usage | float > 90

        - name: Check high CPU load
          set_fact:
            resource_issues: "{{ resource_issues + ['High CPU load: ' + (cpu_load_per_core | string) + ' per core'] }}"
          when:
            - cpu_load_per_core is defined
            - cpu_load_per_core | float > 2.0

        - name: Add resource issues to detection list
          set_fact:
            issues_detected: "{{ issues_detected + resource_issues }}"
            remediation_actions: "{{ remediation_actions + ['Monitor and optimize resource usage', 'Consider scaling or cleanup operations'] }}"
          when: resource_issues | length > 0

    - name: Check for network connectivity issues
      block:
        - name: Detect network issues from previous analysis
          set_fact:
            network_success_rate: "{{ vm_diagnostic_results.network_connectivity.success_rate | default(100) }}"
          when: vm_diagnostic_results.network_connectivity is defined

        - name: Add network issues to detection list
          set_fact:
            issues_detected: "{{ issues_detected + ['Network connectivity issues detected: ' + (network_success_rate | string) + '% success rate'] }}"
            remediation_actions: "{{ remediation_actions + ['Check network configuration, DNS settings, and firewall rules'] }}"
          when:
            - network_success_rate is defined
            - network_success_rate | float < 80

    - name: Record common issue detection results
      set_fact:
        vm_diagnostic_results: "{{ vm_diagnostic_results | combine({
          'common_issue_detection': {
            'status': 'PASS' if issues_detected | length == 0 else 'WARN',
            'issues_detected': issues_detected | length,
            'issue_list': issues_detected,
            'automated_analysis': 'Common patterns checked: cloud-init, services, resources, network'
          }
        }) }}"

    - name: Update diagnostic counters for issue detection
      set_fact:
        vm_diagnostic_passed_count: "{{ vm_diagnostic_passed_count + (1 if issues_detected | length == 0 else 0) }}"

  rescue:
    - name: Record common issue detection failure
      set_fact:
        vm_diagnostic_results: "{{ vm_diagnostic_results | combine({
          'common_issue_detection': {
            'status': 'FAIL',
            'error': ansible_failed_result.msg | default('Common issue detection failed')
          }
        }) }}"
        vm_diagnostic_failed_count: "{{ vm_diagnostic_failed_count + 1 }}"

  when: troubleshooting_automation.common_issue_detection | bool

- name: Automated Remediation Recommendations
  block:
    - name: Generate specific remediation steps
      set_fact:
        detailed_remediation: []

    - name: Add cloud-init remediation steps
      set_fact:
        detailed_remediation: "{{ detailed_remediation + [
          'Cloud-init Issues: Check /var/log/cloud-init.log for errors',
          'Re-run cloud-init: sudo cloud-init clean && sudo cloud-init init',
          'Verify user-data configuration and network connectivity'
        ] }}"
      when: issues_detected | select('search', 'Cloud-init') | list | length > 0

    - name: Add service remediation steps
      set_fact:
        detailed_remediation: "{{ detailed_remediation + [
          'Service Issues: Check service status with systemctl status <service>',
          'Review service logs: journalctl -u <service> -n 50',
          'Attempt service restart: sudo systemctl restart <service>'
        ] }}"
      when: issues_detected | select('search', 'service') | list | length > 0

    - name: Add resource remediation steps
      set_fact:
        detailed_remediation: "{{ detailed_remediation + [
          'Resource Issues: Identify top resource consumers with top/htop',
          'Clean temporary files: sudo apt-get clean && sudo journalctl --vacuum-time=7d',
          'Consider increasing VM resources or optimizing applications'
        ] }}"
      when: issues_detected | select('search', 'memory\|disk\|CPU') | list | length > 0

    - name: Add network remediation steps
      set_fact:
        detailed_remediation: "{{ detailed_remediation + [
          'Network Issues: Test connectivity with ping/curl to known hosts',
          'Check DNS configuration: cat /etc/resolv.conf',
          'Verify firewall rules: sudo iptables -L or sudo ufw status'
        ] }}"
      when: issues_detected | select('search', 'Network') | list | length > 0

    - name: Add general troubleshooting steps
      set_fact:
        detailed_remediation: "{{ detailed_remediation + [
          'General: Check system logs for recent errors: sudo journalctl -p err -n 50',
          'Monitor resource usage: vmstat 1 5 or iostat -x 1 5',
          'Verify system integrity: sudo dmesg | tail -20'
        ] }}"
      when: detailed_remediation | length == 0

    - name: Record remediation recommendations
      set_fact:
        vm_diagnostic_results: "{{ vm_diagnostic_results | combine({
          'automated_remediation_recommendations': {
            'status': 'PASS',
            'total_recommendations': (remediation_actions | length) + (detailed_remediation | length),
            'quick_actions': remediation_actions,
            'detailed_steps': detailed_remediation,
            'self_healing_enabled': troubleshooting_automation.self_healing | bool,
            'recommendation_basis': 'Generated from detected issues and best practices'
          }
        }) }}"
        vm_diagnostic_passed_count: "{{ vm_diagnostic_passed_count + 1 }}"

  rescue:
    - name: Record remediation recommendations failure
      set_fact:
        vm_diagnostic_results: "{{ vm_diagnostic_results | combine({
          'automated_remediation_recommendations': {
            'status': 'FAIL',
            'error': ansible_failed_result.msg | default('Remediation recommendations failed')
          }
        }) }}"
        vm_diagnostic_failed_count: "{{ vm_diagnostic_failed_count + 1 }}"

  when: troubleshooting_automation.remediation_recommendations | bool

- name: System Health Score Calculation
  block:
    - name: Calculate weighted health scores
      set_fact:
        health_scores:
          system_health: "{{ 85 if vm_diagnostic_results.system_hardware.status | default('FAIL') == 'PASS' else (50 if vm_diagnostic_results.system_hardware.status | default('FAIL') == 'WARN' else 20) }}"
          service_health: "{{ 90 if failed_services_list | default([]) | length == 0 else (60 if failed_services_list | default([]) | length <= 2 else 30) }}"
          resource_health: "{{ 80 if bottlenecks_detected | default([]) | length == 0 else (50 if bottlenecks_detected | default([]) | length <= 2 else 25) }}"
          network_health: "{{ 85 if network_success_rate | default(100) | float >= 90 else (60 if network_success_rate | default(100) | float >= 70 else 30) }}"
          log_health: "{{ 75 if total_errors_found | default(0) | int < 5 else (50 if total_errors_found | default(0) | int < 20 else 25) }}"

    - name: Calculate overall health score
      set_fact:
        overall_health_score: "{{ ((health_scores.system_health + health_scores.service_health + health_scores.resource_health + health_scores.network_health + health_scores.log_health) / 5) | round(1) }}"

    - name: Determine health status
      set_fact:
        health_status: "{{ 'EXCELLENT' if overall_health_score | float >= 85 else ('GOOD' if overall_health_score | float >= 70 else ('FAIR' if overall_health_score | float >= 50 else 'POOR')) }}"

    - name: Record health score results
      set_fact:
        vm_diagnostic_results: "{{ vm_diagnostic_results | combine({
          'system_health_score': {
            'status': 'PASS',
            'overall_score': overall_health_score,
            'health_status': health_status,
            'component_scores': health_scores,
            'score_explanation': {
              'excellent': '85-100: System operating optimally',
              'good': '70-84: System healthy with minor issues',
              'fair': '50-69: System functional but needs attention',
              'poor': '0-49: System requires immediate attention'
            }
          }
        }) }}"
        vm_diagnostic_passed_count: "{{ vm_diagnostic_passed_count + 1 }}"

  rescue:
    - name: Record health score calculation failure
      set_fact:
        vm_diagnostic_results: "{{ vm_diagnostic_results | combine({
          'system_health_score': {
            'status': 'FAIL',
            'error': ansible_failed_result.msg | default('Health score calculation failed')
          }
        }) }}"
        vm_diagnostic_failed_count: "{{ vm_diagnostic_failed_count + 1 }}"

- name: Monitoring Integration Preparation
  block:
    - name: Prepare monitoring integration metadata
      set_fact:
        monitoring_metadata:
          host: "{{ inventory_hostname }}"
          timestamp: "{{ ansible_date_time.iso8601 }}"
          session_id: "{{ vm_diagnostic_session_id }}"
          diagnostic_version: "1.0"
          categories_analyzed: "{{ diagnostic_categories }}"

    - name: Generate monitoring-friendly metrics
      set_fact:
        monitoring_metrics:
          health_score: "{{ overall_health_score | default(0) }}"
          issues_detected: "{{ issues_detected | length | default(0) }}"
          services_failed: "{{ failed_services_list | length | default(0) }}"
          cpu_load_per_core: "{{ cpu_load_per_core | default(0) }}"
          memory_usage_percent: "{{ memory_usage_percent | default(0) }}"
          disk_usage_percent: "{{ root_disk_usage | default(0) }}"
          network_success_rate: "{{ network_success_rate | default(100) }}"
          total_log_errors: "{{ total_errors_found | default(0) }}"

    - name: Record monitoring integration data
      set_fact:
        vm_diagnostic_results: "{{ vm_diagnostic_results | combine({
          'monitoring_integration_preparation': {
            'status': 'PASS',
            'metadata': monitoring_metadata,
            'metrics': monitoring_metrics,
            'prometheus_ready': true,
            'grafana_ready': true,
            'integration_note': 'Structured data prepared for monitoring system ingestion'
          }
        }) }}"
        vm_diagnostic_passed_count: "{{ vm_diagnostic_passed_count + 1 }}"

  rescue:
    - name: Record monitoring integration failure
      set_fact:
        vm_diagnostic_results: "{{ vm_diagnostic_results | combine({
          'monitoring_integration_preparation': {
            'status': 'FAIL',
            'error': ansible_failed_result.msg | default('Monitoring integration preparation failed')
          }
        }) }}"
        vm_diagnostic_failed_count: "{{ vm_diagnostic_failed_count + 1 }}"

  when: troubleshooting_automation.monitoring_integration | bool

- name: Write troubleshooting diagnostics to file
  copy:
    content: "{{ vm_diagnostic_results | selectattr('match', '^(common_issue|automated_remediation|system_health|monitoring_integration)') | dict2items | to_nice_json }}"
    dest: "{{ diagnostic_output_dir }}/troubleshooting_diagnostics.json"
    mode: '0644'
  when: vm_diagnostic_results | selectattr('match', '^(common_issue|automated_remediation|system_health|monitoring_integration)') | list | length > 0

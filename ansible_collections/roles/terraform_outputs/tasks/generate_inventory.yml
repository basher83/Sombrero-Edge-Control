---
#SPDX-License-Identifier: MIT-0
# Generate Ansible Inventory from Terraform Outputs

- name: Initialize inventory generation
  set_fact:
    inventory_data: {}
    inventory_hosts: {}
    inventory_groups: {}

- name: Backup existing inventory file
  copy:
    src: "{{ inventory_generation.output_path }}"
    dest: "{{ inventory_generation.output_path }}.backup.{{ ansible_date_time.epoch }}"
  delegate_to: localhost
  when:
    - inventory_generation.backup_existing | bool
    - inventory_generation.output_path | exists
  failed_when: false

- name: Process outputs for inventory generation
  block:
    - name: Build host entries from outputs
      set_fact:
        inventory_hosts: "{{ inventory_hosts | combine({
          host_name: {
            'ansible_host': terraform_parsed_outputs[project_env][host_configuration.ip_source] | default(''),
            'ansible_user': terraform_parsed_outputs[project_env][host_configuration.ssh_key_source] | default(host_configuration.default_user),
            'environment': project_env,
            'managed_by': 'terraform',
            'terraform_workspace': terraform_outputs_results[project_env].workspace | default('default')
          }
        }) }}"
      vars:
        host_name: "{{ terraform_parsed_outputs[project_env][host_configuration.hostname_source] | default('host-' + project_env) }}"
        project_env: "{{ item.key }}"
      loop: "{{ terraform_parsed_outputs | dict2items }}"
      when: terraform_parsed_outputs[item.key] | length > 0

    - name: Add Terraform variables to hosts
      set_fact:
        inventory_hosts: "{{ inventory_hosts | combine({
          host_name: inventory_hosts[host_name] | combine({
            (variable_integration.namespace + '_' + tf_var.key): tf_var.value
          })
        }, recursive=True) }}"
      vars:
        host_name: "{{ terraform_parsed_outputs[project_env][host_configuration.hostname_source] | default('host-' + project_env) }}"
        project_env: "{{ item.0.key }}"
      loop: "{{ terraform_parsed_outputs | dict2items | subelements('value', skip_missing=True) | default([]) }}"
      loop_control:
        loop_var: tf_var
      when:
        - variable_integration.enabled | bool
        - variable_integration.namespace | length > 0

  rescue:
    - name: Handle host processing failure
      debug:
        msg: "Failed to process hosts from outputs, continuing with empty inventory"
      set_fact:
        inventory_hosts: {}

- name: Generate inventory groups
  block:
    - name: Create default groups
      set_fact:
        inventory_groups: "{{ inventory_groups | combine({
          item: {
            'hosts': {},
            'vars': group_configuration.group_vars[item] | default({})
          }
        }) }}"
      loop: "{{ group_configuration.default_groups }}"

    - name: Group hosts by configured attributes
      set_fact:
        inventory_groups: "{{ inventory_groups | combine({
          group_name: {
            'hosts': inventory_groups[group_name].hosts | default({}) | combine({
              host_name: {}
            }),
            'vars': inventory_groups[group_name].vars | default({})
          }
        }, recursive=True) }}"
      vars:
        group_name: "{{ inventory_hosts[host_name][group_attr] | default('ungrouped') }}"
        host_name: "{{ item.key }}"
      loop: "{{ inventory_hosts | dict2items }}"
      loop_control:
        loop_var: host_item
      with_items: "{{ group_configuration.group_by }}"
      when: group_attr in inventory_hosts[item.key]

    - name: Add all hosts to default groups
      set_fact:
        inventory_groups: "{{ inventory_groups | combine({
          item: {
            'hosts': inventory_groups[item].hosts | combine(inventory_hosts),
            'vars': inventory_groups[item].vars | default({})
          }
        }, recursive=True) }}"
      loop: "{{ group_configuration.default_groups }}"

  rescue:
    - name: Handle group processing failure
      debug:
        msg: "Failed to process groups, using minimal group structure"
      set_fact:
        inventory_groups:
          all:
            hosts: "{{ inventory_hosts }}"
            vars: {}

- name: Build final inventory structure
  set_fact:
    inventory_data:
      all:
        children: "{{ inventory_groups }}"
      _meta:
        hostvars: "{{ inventory_hosts }}"

- name: Generate inventory in requested format
  block:
    - name: Generate YAML inventory
      copy:
        content: "{{ inventory_data | to_nice_yaml }}"
        dest: "{{ inventory_generation.output_path }}"
        mode: "{{ security.inventory_file_mode }}"
      delegate_to: localhost
      when: inventory_generation.format == "yaml"

    - name: Generate JSON inventory
      copy:
        content: "{{ inventory_data | to_nice_json }}"
        dest: "{{ inventory_generation.output_path }}"
        mode: "{{ security.inventory_file_mode }}"
      delegate_to: localhost
      when: inventory_generation.format == "json"

    - name: Generate INI inventory
      template:
        src: inventory.ini.j2
        dest: "{{ inventory_generation.output_path }}"
        mode: "{{ security.inventory_file_mode }}"
      delegate_to: localhost
      when: inventory_generation.format == "ini"
      vars:
        hosts: "{{ inventory_hosts }}"
        groups: "{{ inventory_groups }}"

  rescue:
    - name: Handle inventory file generation failure
      fail:
        msg: "Failed to generate inventory file: {{ ansible_failed_result.msg }}"

- name: Validate generated inventory
  block:
    - name: Test inventory file syntax
      shell: ansible-inventory -i {{ inventory_generation.output_path }} --list
      register: inventory_validation
      delegate_to: localhost
      when: inventory_generation.validate_generated | bool

    - name: Validate inventory content
      assert:
        that:
          - inventory_validation.rc == 0
          - inventory_validation.stdout | from_json | length > 0
        fail_msg: "Generated inventory failed validation"
      when:
        - inventory_generation.validate_generated | bool
        - inventory_validation is defined

  rescue:
    - name: Handle inventory validation failure
      debug:
        msg: "Inventory validation failed but continuing: {{ ansible_failed_result.msg }}"
      when: error_handling.continue_on_output_errors | bool

    - name: Fail on validation error
      fail:
        msg: "Inventory validation failed: {{ ansible_failed_result.msg }}"
      when: not error_handling.continue_on_output_errors | bool

- name: Store inventory generation results
  set_fact:
    terraform_inventory_data: "{{ inventory_data }}"
    terraform_outputs_results: "{{ terraform_outputs_results | combine({
      'inventory_generation': {
        'status': 'SUCCESS',
        'output_path': inventory_generation.output_path,
        'format': inventory_generation.format,
        'hosts_generated': inventory_hosts | length,
        'groups_generated': inventory_groups | length
      }
    }) }}"

- name: Display inventory generation summary
  debug:
    msg:
      - "=== Inventory Generation Complete ==="
      - "Output Path: {{ inventory_generation.output_path }}"
      - "Format: {{ inventory_generation.format }}"
      - "Hosts Generated: {{ inventory_hosts | length }}"
      - "Groups Generated: {{ inventory_groups | length }}"
      - "Validation: {{ 'Passed' if inventory_generation.validate_generated and inventory_validation.rc == 0 else 'Skipped' }}"

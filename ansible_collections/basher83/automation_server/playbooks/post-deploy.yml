# Post-Deployment Configuration Playbook
# Handles instance-specific configuration after VM deployment
# This runs AFTER Terraform deployment using the golden image
- name: Configure deployed VM instance
  hosts: all
  become: true
  gather_facts: true
  vars:
    # Instance-specific configuration
    ansible_user_groups:
      - docker
      - sudo
    # SSH hardening for production
    ssh_password_auth: false
    ssh_root_login: false
    # Monitoring and logging
    enable_monitoring: false
    enable_log_rotation: true
  tasks:
    # ============================================================================
    # USER AND ACCESS MANAGEMENT
    # ============================================================================
    - name: Ensure ansible user is in required groups
      user:
        name: ansible
        groups: "{{ ansible_user_groups }}"
        append: true
    - name: Configure SSH keys for ansible user
      authorized_key:
        user: ansible
        state: present
        key: "{{ lookup('file', item) }}"
      loop: "{{ ssh_public_keys | default([]) }}"
      when: ssh_public_keys is defined
    - name: Disable password authentication (production hardening)
      lineinfile:
        path: /etc/ssh/sshd_config.d/99-production-hardening.conf
        create: true
        line: "PasswordAuthentication {{ 'yes' if ssh_password_auth else 'no' }}"
        regexp: '^PasswordAuthentication'
      notify: restart ssh
    # ============================================================================
    # DOCKER POST-DEPLOYMENT CONFIGURATION
    # ============================================================================
    - name: Verify Docker service is running
      systemd:
        name: docker
        state: started
        enabled: true
    - name: Test Docker functionality
      docker_container:
        name: docker-test
        image: hello-world
        state: started
        detach: false
        cleanup: true
      become: false
      register: docker_test
    - name: Display Docker test results
      debug:
        msg: "Docker test completed successfully"
      when: docker_test is succeeded
    # ============================================================================
    # DEVELOPMENT ENVIRONMENT CONFIGURATION
    # ============================================================================
    - name: Configure mise for ansible user
      block:
        - name: Check if mise is available
          command: which mise
          register: mise_check
          become: false
          changed_when: false
          failed_when: false
        - name: Install project tools with mise (if .mise.toml exists)
          shell: |
            eval "$(~/.local/bin/mise activate bash)"
            mise install
          become: false
          when: mise_check.rc == 0
          args:
            chdir: /home/ansible
          ignore_errors: true
    - name: Verify uv installation
      command: /home/ansible/.local/bin/uv --version
      register: uv_version
      become: false
      changed_when: false
      failed_when: false
    - name: Display installed tool versions
      debug:
        msg:
          - "uv version: {{ uv_version.stdout | default('not installed') }}"
          - "Docker version: {{ ansible_facts['docker_version'] | default('unknown') }}"
    # ============================================================================
    # SYSTEM MONITORING AND MAINTENANCE
    # ============================================================================
    - name: Configure log rotation
      copy:
        dest: /etc/logrotate.d/jump-man
        content: |
          /var/log/jump-man/*.log {
            daily
            rotate 30
            compress
            delaycompress
            missingok
            notifempty
            create 644 ansible ansible
          }
      when: enable_log_rotation | bool
    - name: Setup basic monitoring script
      copy:
        dest: /usr/local/bin/system-health-check.sh
        mode: '0755'
        content: |
          #!/bin/bash
          # Basic system health monitoring
          echo "=== System Health Check - $(date) ===" >> /var/log/jump-man/health.log
          echo "Disk Usage:" >> /var/log/jump-man/health.log
          df -h >> /var/log/jump-man/health.log
          echo "Memory Usage:" >> /var/log/jump-man/health.log
          free -h >> /var/log/jump-man/health.log
          echo "Docker Status:" >> /var/log/jump-man/health.log
          systemctl status docker --no-pager -l >> /var/log/jump-man/health.log
          echo "---" >> /var/log/jump-man/health.log
      when: enable_monitoring | bool
    - name: Create log directory
      file:
        path: /var/log/jump-man
        state: directory
        owner: ansible
        group: ansible
        mode: '0755'
    # ============================================================================
    # FINAL VALIDATION AND STATUS
    # ============================================================================
    - name: Final system validation
      block:
        - name: Check critical services
          systemd:
            name: "{{ item }}"
            state: started
          loop:
            - ssh
            - docker
        - name: Verify network connectivity
          uri:
            url: https://github.com
            method: HEAD
            timeout: 10
          register: network_test
        - name: Create deployment completion marker
          copy:
            dest: /etc/jump-man-deployment-complete
            content: |
              Deployment completed: {{ ansible_date_time.iso8601 }}
              Configured by: {{ ansible_user }}
              Golden image: {{ ansible_facts['virtualization_role'] | default('unknown') }}
              Docker version: {{ ansible_facts['docker_version'] | default('unknown') }}
  handlers:
    - name: restart ssh
      systemd:
        name: ssh
        state: restarted

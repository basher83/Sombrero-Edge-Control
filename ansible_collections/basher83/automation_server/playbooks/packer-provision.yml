# Packer Provisioning Playbook
# Configures the golden image with Docker, development tools, and base setup
# This runs during Packer build to create a comprehensive base image
- name: Provision golden image with comprehensive tooling
  hosts: golden_image:packer_build # Use Packer-provided groups
  become: true
  gather_facts: true
  vars:
    # Docker configuration
    docker_version: "24.*"
    docker_compose_version: "2.23.0"
    # Development tools versions
    mise_version: "latest"
    uv_version: "latest"
    # System configuration
    enable_unattended_upgrades: true
    timezone: "UTC"
    # Packer context (automatically provided by Packer)
    # packer_build_name - Name of the build
    # packer_builder_type - Type of builder (proxmox-clone)
    # packer_build - Set to true via extra_arguments
    # golden_image_build - Our custom variable
    # build_timestamp - Build timestamp
  tasks:
    # Display Packer build context
    - name: Display Packer build information
      debug:
        msg:
          - "Building golden image with Packer"
          - "Build name: {{ packer_build_name | default('unknown') }}"
          - "Builder type: {{ packer_builder_type | default('unknown') }}"
          - "Build timestamp: {{ build_timestamp | default('unknown') }}"
          - "Ansible user: {{ ansible_user }}"
      when: packer_build | default(false) | bool
    - name: Update apt cache
      apt:
        update_cache: true
        cache_valid_time: 3600
    - name: Install essential packages
      apt:
        name:
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - software-properties-common
          - apt-transport-https
          - wget
          - unzip
          - git
          - vim
          - htop
          - tree
          - jq
          - build-essential
          - python3
          - python3-pip
          - python3-venv
        state: present
    # ============================================================================
    # DOCKER INSTALLATION (via role)
    # ============================================================================
    - name: Install and configure Docker
      include_role:
        name: basher83.automation_server.docker
      vars:
        docker_installation_mode: "install"
        docker_users_list:
          - "{{ ansible_user }}"  # Add ansible_user to docker group for Packer builds
        docker_service_enabled: true
        docker_service_state: "started"
        docker_packages:
          - "docker-ce"
          - "docker-ce-cli"
          - "containerd.io"
          - "docker-buildx-plugin"
          - "docker-compose-plugin"
        docker_enable_cleanup_cron: false  # Don't enable cleanup in golden image
        docker_configure_log_rotation: true
        docker_debug_mode: "{{ debug_mode | default(false) }}"
    # ============================================================================
    # DEVELOPMENT TOOLS INSTALLATION
    # ============================================================================
    - name: Install mise (development tool version manager)
      shell: |
        curl https://mise.run | sh
        echo 'eval "$(~/.local/bin/mise activate bash)"' >> ~/.bashrc
      args:
        creates: ~/.local/bin/mise
      become: false
    - name: Install uv (Python package manager)
      shell: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        echo 'export PATH="$HOME/.local/bin:$PATH"' >> ~/.bashrc
      args:
        creates: ~/.local/bin/uv
      become: false
    - name: Install Node.js via nvm (Node Version Manager)
      block:
        - name: Install nvm for ansible user
          shell: |
            # Download and install nvm
            curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.0/install.sh | bash

            # Source nvm and install Node.js LTS
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm install --lts
            nvm use --lts
            nvm alias default lts/*
          args:
            creates: ~/.nvm/nvm.sh
            executable: /bin/bash
          become: false
        - name: Configure nvm in shell profiles
          blockinfile:
            path: ~/.bashrc
            marker: "# {mark} NVM Configuration"
            block: |
              export NVM_DIR="$HOME/.nvm"
              [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
              [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
            create: true
          become: false
        - name: Install essential npm global packages
          shell: |
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            npm install -g yarn pnpm @angular/cli @vue/cli create-react-app
          become: false
          args:
            executable: /bin/bash
          register: npm_globals
          changed_when: "'added' in npm_globals.stdout"
    # ============================================================================
    # SYSTEM CONFIGURATION
    # ============================================================================
    - name: Set timezone
      timezone:
        name: "{{ timezone }}"
    - name: Configure unattended upgrades
      block:
        - name: Install unattended-upgrades package
          apt:
            name: unattended-upgrades
            state: present
        - name: Enable unattended upgrades
          debconf:
            name: unattended-upgrades
            question: unattended-upgrades/enable_auto_updates
            value: "true"
            vtype: boolean
          when: enable_unattended_upgrades | bool
    - name: Configure SSH for better security (golden image baseline)
      blockinfile:
        path: /etc/ssh/sshd_config.d/99-packer-hardening.conf
        create: true
        block: |
          # Packer golden image SSH hardening
          Protocol 2
          PermitRootLogin no
          PasswordAuthentication yes  # Will be disabled post-deployment
          PubkeyAuthentication yes
          AuthorizedKeysFile .ssh/authorized_keys
          PermitEmptyPasswords no
          X11Forwarding no
          MaxAuthTries 3
          ClientAliveInterval 300
          ClientAliveCountMax 2
        marker: "# {mark} PACKER MANAGED BLOCK"
      notify: restart ssh
    # ============================================================================
    # GOLDEN IMAGE CLEANUP (Only during Packer builds)
    # ============================================================================
    - name: Golden image cleanup tasks
      block:
        - name: Remove cloud-init artifacts for template
          file:
            path: "{{ item }}"
            state: absent
          loop:
            - /etc/cloud/cloud.cfg.d/subiquity-disable-cloudinit-networking.cfg
            - /etc/netplan/00-installer-config.yaml
        - name: Clean package cache
          apt:
            autoclean: true
            autoremove: true
        - name: Clear bash history
          file:
            path: "{{ ansible_env.HOME }}/.bash_history"
            state: absent
          become: false
        - name: Clear machine-id for template
          copy:
            content: ""
            dest: /etc/machine-id
            force: true
      when: packer_build | bool
  handlers:
    - name: restart ssh
      systemd:
        name: ssh
        state: restarted

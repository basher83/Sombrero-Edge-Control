---
# Test playbook for terraform_outputs role

- name: Test Terraform Outputs Role
  hosts: localhost
  gather_facts: true

  vars:
    # Basic test configuration
    terraform_project_path: "infrastructure/environments/production"
    terraform_workspace: "default"
    terraform_backend_type: "local"

    # Output parsing configuration (basic test)
    parse_outputs:
      - vm_ip
      - vm_hostname
      - vm_id
      - ssh_user

    parse_all_outputs: false  # Use specific outputs for testing
    exclude_sensitive_outputs: true

    # Output validation (relaxed for testing)
    validate_outputs: true
    required_outputs: []  # No required outputs for basic test
    fail_on_missing_outputs: false

    # Inventory generation (enabled for testing)
    inventory_generation:
      enabled: true
      output_path: "/tmp/terraform_test_inventory.yml"
      format: "yaml"
      backup_existing: false  # No backup needed for test
      validate_generated: false  # Skip validation for basic test

    # Host configuration (test defaults)
    host_configuration:
      hostname_source: "vm_hostname"
      ip_source: "vm_ip"
      default_user: "ubuntu"
      ssh_key_source: ""

    # Group configuration (minimal for testing)
    group_configuration:
      group_by:
        - environment
      default_groups:
        - "terraform_managed"
      group_vars:
        terraform_managed:
          managed_by: "terraform"

    # Variable integration (enabled for testing)
    variable_integration:
      enabled: true
      namespace: "tf"
      convert_types: true
      create_facts: true

    # Variable mapping (basic mapping)
    variable_mapping:
      vm_ip: "ansible_host"
      vm_hostname: "inventory_hostname_short"
      ssh_user: "ansible_user"

    # State validation (disabled for basic test)
    state_validation:
      enabled: false  # Disabled to avoid complex state checks
      check_drift: false
      validate_resources: false
      backup_state: false

    # Performance settings (optimized for testing)
    performance:
      cache_outputs: false  # Disabled for testing
      parallel_processing: false
      max_concurrent_projects: 1

    # Error handling (permissive for testing)
    error_handling:
      ignore_missing_project: true  # Allow missing projects for testing
      ignore_terraform_errors: true  # Continue on Terraform errors
      continue_on_output_errors: true
      retry_attempts: 1  # Fewer retries for faster testing
      retry_delay_seconds: 2

    # Logging (enabled for testing)
    logging:
      log_level: "info"
      log_terraform_commands: true
      log_output_parsing: true
      detailed_logging: true

    # Security settings (basic for testing)
    security:
      mask_sensitive_outputs: true
      secure_temp_files: true
      inventory_file_mode: "0644"
      validate_file_permissions: false  # Skip for testing

    # Cleanup settings
    cleanup:
      cleanup_temp_files: true
      remove_cache_on_completion: true

  pre_tasks:
    - name: Create mock Terraform project structure for testing
      file:
        path: "{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - "{{ terraform_project_path }}"
        - "/tmp/terraform-outputs-test"
      delegate_to: localhost

    - name: Create mock Terraform outputs for testing
      copy:
        content: |
          {
            "vm_ip": {
              "value": "192.168.10.250",
              "type": "string",
              "sensitive": false
            },
            "vm_hostname": {
              "value": "jump-man",
              "type": "string",
              "sensitive": false
            },
            "vm_id": {
              "value": "vm-12345",
              "type": "string",
              "sensitive": false
            },
            "ssh_user": {
              "value": "ubuntu",
              "type": "string",
              "sensitive": false
            },
            "test_secret": {
              "value": "secret-value",
              "type": "string",
              "sensitive": true
            }
          }
        dest: "{{ terraform_project_path }}/mock_outputs.json"
        mode: '0644'
      delegate_to: localhost

    - name: Create mock terraform command script
      copy:
        content: |
          #!/bin/bash
          case "$1" in
            "output")
              if [[ "$2" == "-json" ]]; then
                cat "{{ terraform_project_path }}/mock_outputs.json"
              fi
              ;;
            "workspace")
              echo "default"
              ;;
            "init")
              mkdir -p "{{ terraform_project_path }}/.terraform"
              echo "Terraform has been successfully initialized!"
              ;;
            *)
              echo "Mock terraform command - unsupported: $*"
              exit 0
              ;;
          esac
        dest: "{{ terraform_project_path }}/mock_terraform.sh"
        mode: '0755'
      delegate_to: localhost

    - name: Update PATH to use mock terraform (for testing)
      set_fact:
        ansible_env: "{{ ansible_env | combine({'PATH': terraform_project_path + ':' + ansible_env.PATH}) }}"
      delegate_to: localhost

    - name: Create symbolic link for mock terraform
      file:
        src: "{{ terraform_project_path }}/mock_terraform.sh"
        dest: "{{ terraform_project_path }}/terraform"
        state: link
      delegate_to: localhost

    - name: Display test configuration
      debug:
        msg:
          - "=== Terraform Outputs Role Test ==="
          - "Project Path: {{ terraform_project_path }}"
          - "Workspace: {{ terraform_workspace }}"
          - "Parse Outputs: {{ parse_outputs | join(', ') }}"
          - "Inventory Output: {{ inventory_generation.output_path }}"
          - "Variable Namespace: {{ variable_integration.namespace }}"

  roles:
    - role: basher83.automation_server.terraform_outputs

  post_tasks:
    - name: Display test results
      debug:
        msg:
          - "=== Terraform Outputs Test Complete ==="
          - "Status: {{ terraform_outputs_status | default('Unknown') }}"
          - "Session ID: {{ terraform_outputs_session_id | default('N/A') }}"
          - "Outputs Parsed: {{ terraform_parsed_outputs | length }}"
      when: terraform_outputs_completed | default(false)

    - name: Verify inventory file was created
      stat:
        path: "{{ inventory_generation.output_path }}"
      register: inventory_file_check
      delegate_to: localhost

    - name: Display inventory file status
      debug:
        msg:
          - "Inventory File Created: {{ inventory_file_check.stat.exists }}"
          - "Inventory Path: {{ inventory_generation.output_path }}"
      when: inventory_file_check is defined

    - name: Show parsed outputs
      debug:
        var: terraform_parsed_outputs
      when: terraform_parsed_outputs is defined

    - name: Show generated inventory data
      debug:
        var: terraform_inventory_data
      when: terraform_inventory_data is defined

    - name: Display integration summary
      debug:
        var: terraform_outputs_summary
      when: terraform_outputs_summary is defined

    - name: Clean up test files
      file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ terraform_project_path }}"
        - "{{ inventory_generation.output_path }}"
        - "/tmp/terraform-outputs-test"
      delegate_to: localhost
      when: true  # Set to false if you want to preserve test files for inspection

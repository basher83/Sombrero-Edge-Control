---
#SPDX-License-Identifier: MIT-0
# Application health check tasks

- name: HTTP endpoint health checks
  block:
    - name: Test HTTP health check endpoints
      uri:
        url: "{{ item.url }}"
        method: "{{ item.method | default('GET') }}"
        status_code: "{{ item.expected_status | default(200) }}"
        timeout: "{{ item.timeout | default(test_config.timeout_default) }}"
        validate_certs: "{{ item.validate_certs | default(true) }}"
        return_content: true
      loop: "{{ health_check_endpoints }}"
      register: http_health_results
      when: health_check_endpoints | length > 0

    - name: Record HTTP health check results
      set_fact:
        smoke_test_results: "{{ smoke_test_results | combine({'http_health_checks': {'status': 'PASS', 'endpoints': endpoint_results}}) }}"
        smoke_test_passed_count: "{{ smoke_test_passed_count + 1 }}"
      vars:
        endpoint_results: "{{ http_health_results.results | map(attribute='url') | list }}"
      when:
        - health_check_endpoints | length > 0
        - http_health_results is defined

    - name: Skip HTTP health checks if no endpoints defined
      set_fact:
        smoke_test_results: "{{ smoke_test_results | combine({'http_health_checks': {'status': 'SKIP', 'reason': 'No health check endpoints configured'}}) }}"
      when: health_check_endpoints | length == 0

  rescue:
    - name: Record HTTP health check failure
      set_fact:
        smoke_test_results: "{{ smoke_test_results | combine({'http_health_checks': {'status': 'FAIL', 'endpoints': health_check_endpoints, 'error': ansible_failed_result.msg}}) }}"
        smoke_test_failed_count: "{{ smoke_test_failed_count + 1 }}"

    - name: Debug HTTP health check failure
      debug:
        msg: "HTTP health check failed: {{ ansible_failed_result.msg }}"
      when: test_config.collect_debug_info | default(true)

- name: Custom application validation
  block:
    - name: Check for custom application processes
      command: pgrep -f "{{ item }}"
      loop: "{{ custom_processes | default([]) }}"
      register: process_check_results
      changed_when: false
      failed_when: false

    - name: Validate custom processes are running
      assert:
        that:
          - item.rc == 0
        fail_msg: "Process pattern '{{ item.item }}' not found running"
        success_msg: "Process pattern '{{ item.item }}' is running"
      loop: "{{ process_check_results.results }}"
      when:
        - custom_processes | default([]) | length > 0
        - process_check_results is defined

    - name: Record custom process validation results
      set_fact:
        smoke_test_results: "{{ smoke_test_results | combine({'custom_processes': {'status': 'PASS', 'processes': custom_processes}}) }}"
        smoke_test_passed_count: "{{ smoke_test_passed_count + 1 }}"
      when: custom_processes | default([]) | length > 0

    - name: Skip custom process checks if none defined
      set_fact:
        smoke_test_results: "{{ smoke_test_results | combine({'custom_processes': {'status': 'SKIP', 'reason': 'No custom processes defined'}}) }}"
      when: custom_processes | default([]) | length == 0

  rescue:
    - name: Record custom process validation failure
      set_fact:
        smoke_test_results: "{{ smoke_test_results | combine({'custom_processes': {'status': 'FAIL', 'processes': custom_processes | default([]), 'error': ansible_failed_result.msg}}) }}"
        smoke_test_failed_count: "{{ smoke_test_failed_count + 1 }}"

    - name: Debug custom process validation failure
      debug:
        msg: "Custom process validation failed: {{ ansible_failed_result.msg }}"
      when: test_config.collect_debug_info | default(true)

- name: Database connectivity checks
  block:
    - name: Test database connectivity (PostgreSQL)
      command: >
        pg_isready
        -h {{ item.host | default('localhost') }}
        -p {{ item.port | default(5432) }}
        -U {{ item.user | default('postgres') }}
        -d {{ item.database | default('postgres') }}
        -t {{ item.timeout | default(10) }}
      loop: "{{ database_connections | default([]) }}"
      register: db_connectivity_results
      changed_when: false
      when:
        - database_connections | default([]) | length > 0
        - item.type | default('postgresql') == 'postgresql'

    - name: Test database connectivity (MySQL/MariaDB)
      command: >
        mysqladmin ping
        -h {{ item.host | default('localhost') }}
        -P {{ item.port | default(3306) }}
        -u {{ item.user | default('root') }}
        {{ '-p' + item.password if item.password is defined else '' }}
        --connect_timeout={{ item.timeout | default(10) }}
      loop: "{{ database_connections | default([]) }}"
      register: mysql_connectivity_results
      changed_when: false
      when:
        - database_connections | default([]) | length > 0
        - item.type | default('postgresql') in ['mysql', 'mariadb']

    - name: Record database connectivity results
      set_fact:
        smoke_test_results: "{{ smoke_test_results | combine({'database_connectivity': {'status': 'PASS', 'databases': database_connections}}) }}"
        smoke_test_passed_count: "{{ smoke_test_passed_count + 1 }}"
      when: database_connections | default([]) | length > 0

    - name: Skip database connectivity checks if none defined
      set_fact:
        smoke_test_results: "{{ smoke_test_results | combine({'database_connectivity': {'status': 'SKIP', 'reason': 'No database connections defined'}}) }}"
      when: database_connections | default([]) | length == 0

  rescue:
    - name: Record database connectivity failure
      set_fact:
        smoke_test_results: "{{ smoke_test_results | combine({'database_connectivity': {'status': 'FAIL', 'databases': database_connections | default([]), 'error': ansible_failed_result.msg}}) }}"
        smoke_test_failed_count: "{{ smoke_test_failed_count + 1 }}"

    - name: Debug database connectivity failure
      debug:
        msg: "Database connectivity check failed: {{ ansible_failed_result.msg }}"
      when: test_config.collect_debug_info | default(true)

- name: Display application health check summary
  debug:
    msg:
      - "Application Health Check Results:"
      - "  HTTP Endpoints: {{ smoke_test_results.http_health_checks.status | default('SKIP') }}"
      - "  Custom Processes: {{ smoke_test_results.custom_processes.status | default('SKIP') }}"
      - "  Database Connectivity: {{ smoke_test_results.database_connectivity.status | default('SKIP') }}"
  when: reporting.log_level in ['debug', 'info']

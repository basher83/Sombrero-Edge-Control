---
# Fail2ban Configuration Tasks

- name: Install fail2ban and dependencies
  ansible.builtin.package:
    name:
      - fail2ban
      - python3-systemd
      - whois
      - mailutils
    state: present
  when: security_fail2ban_enabled

- name: Create fail2ban configuration directory
  ansible.builtin.file:
    path: /etc/fail2ban/jail.d
    state: directory
    owner: root
    group: root
    mode: '0755'
  when: security_fail2ban_enabled

- name: Configure fail2ban default settings
  ansible.builtin.template:
    src: fail2ban-jail.local.j2
    dest: /etc/fail2ban/jail.local
    owner: root
    group: root
    mode: '0644'
    backup: true
  when: security_fail2ban_enabled
  notify: restart fail2ban

- name: Configure SSH jail for fail2ban
  ansible.builtin.template:
    src: fail2ban-sshd.conf.j2
    dest: /etc/fail2ban/jail.d/sshd.conf
    owner: root
    group: root
    mode: '0644'
  when: security_fail2ban_enabled
  notify: restart fail2ban

- name: Create custom fail2ban filters directory
  ansible.builtin.file:
    path: /etc/fail2ban/filter.d
    state: directory
    owner: root
    group: root
    mode: '0755'
  when: security_fail2ban_enabled

- name: Configure additional fail2ban jails
  ansible.builtin.template:
    src: fail2ban-custom-jail.conf.j2
    dest: "/etc/fail2ban/jail.d/{{ item.name }}.conf"
    owner: root
    group: root
    mode: '0644'
  loop: "{{ security_fail2ban_jails }}"
  when:
    - security_fail2ban_enabled
    - item.name != 'sshd'
  notify: restart fail2ban

- name: Configure fail2ban action settings
  ansible.builtin.lineinfile:
    path: /etc/fail2ban/jail.local
    regexp: "^{{ item.key }} ="
    line: "{{ item.key }} = {{ item.value }}"
    state: present
  loop:
    - { key: "bantime", value: "{{ security_fail2ban_bantime }}" }
    - { key: "findtime", value: "{{ security_fail2ban_findtime }}" }
    - { key: "maxretry", value: "{{ security_fail2ban_maxretry }}" }
    - { key: "destemail", value: "{{ security_fail2ban_destemail }}" }
    - { key: "action", value: "{{ security_fail2ban_action }}" }
  when: security_fail2ban_enabled
  notify: restart fail2ban

- name: Create fail2ban persistent database
  ansible.builtin.file:
    path: /var/lib/fail2ban/fail2ban.sqlite3
    state: touch
    owner: root
    group: root
    mode: '0644'
    modification_time: preserve
    access_time: preserve
  when: security_fail2ban_enabled

- name: Configure fail2ban to use systemd journal
  ansible.builtin.lineinfile:
    path: /etc/fail2ban/jail.local
    regexp: "^backend ="
    line: "backend = systemd"
    state: present
  when:
    - security_fail2ban_enabled
    - ansible_service_mgr == "systemd"
  notify: restart fail2ban

- name: Set fail2ban log level
  ansible.builtin.lineinfile:
    path: /etc/fail2ban/fail2ban.local
    regexp: "^loglevel ="
    line: "loglevel = INFO"
    state: present
    create: true
    owner: root
    group: root
    mode: '0644'
  when: security_fail2ban_enabled
  notify: restart fail2ban

- name: Ensure fail2ban is started and enabled
  ansible.builtin.systemd:
    name: fail2ban
    state: started
    enabled: true
    daemon_reload: true
  when: security_fail2ban_enabled

- name: Configure fail2ban IP whitelist
  ansible.builtin.lineinfile:
    path: /etc/fail2ban/jail.local
    regexp: "^ignoreip ="
    line: "ignoreip = {{ security_fail2ban_ignoreip }}"
    state: present
  when: security_fail2ban_enabled
  notify: restart fail2ban

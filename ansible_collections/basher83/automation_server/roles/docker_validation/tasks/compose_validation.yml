---
#SPDX-License-Identifier: MIT
# Docker Compose stack validation tasks

- name: Validate Docker Compose stacks
  block:
    - name: Check Docker Compose stack files exist
      stat:
        path: "{{ item.path }}"
      loop: "{{ docker_compose_stacks }}"
      register: compose_file_stats
      when: docker_compose_stacks | length > 0

    - name: Validate compose files are readable
      assert:
        that:
          - item.stat.exists
          - item.stat.readable
        fail_msg: "Compose file not found or not readable: {{ item.item.path }}"
        success_msg: "Compose file accessible: {{ item.item.path }}"
      loop: "{{ compose_file_stats.results }}"
      when:
        - docker_compose_stacks | length > 0
        - compose_file_stats is defined

    - name: Get Docker Compose stack status
      command: docker compose -f {{ item.path }} ps --format json
      loop: "{{ docker_compose_stacks }}"
      register: compose_ps_results
      changed_when: false
      failed_when: false
      when: docker_compose_stacks | length > 0

    - name: Parse Docker Compose service status
      set_fact:
        compose_services: "{{ compose_services | default({}) | combine({item.item.path: (item.stdout | from_json if item.stdout else [])}) }}"
      loop: "{{ compose_ps_results.results }}"
      when:
        - docker_compose_stacks | length > 0
        - compose_ps_results is defined
        - item.rc == 0

    - name: Validate expected services are running
      assert:
        that:
          - service_name in (compose_services[item.path] | map(attribute='Service') | list)
        fail_msg: "Expected service '{{ service_name }}' not found in compose stack {{ item.path }}"
        success_msg: "Service '{{ service_name }}' found in compose stack {{ item.path }}"
      loop: "{{ docker_compose_stacks | subelements('services_expected', skip_missing=True) }}"
      loop_control:
        loop_var: compose_item
      vars:
        service_name: "{{ compose_item.1 }}"
        item: "{{ compose_item.0 }}"
      when:
        - docker_compose_stacks | length > 0
        - compose_services is defined

    - name: Build (stack, service) pairs
      set_fact:
        compose_service_pairs: >-
          {{ (compose_service_pairs | default([])) + (
             (compose_services[stack_item.path] | default([]))
             | map('combine', {'__stack_path': stack_item.path}) | list) }}
      loop: "{{ docker_compose_stacks }}"
      loop_control: { loop_var: stack_item }
      when:
        - (docker_compose_stacks | default([])) | length > 0
        - compose_services is defined

    - name: Validate service states in compose stacks
      assert:
        that:
          - item.State in ['running', 'Up']
        fail_msg: "Service {{ item.Service }} in stack {{ item.__stack_path }} is {{ item.State }}, expected running"
        success_msg: "Service {{ item.Service }} in stack {{ item.__stack_path }} is {{ item.State }}"
      loop: "{{ compose_service_pairs | default([]) }}"
    - name: Record compose stack validation results
      set_fact:
        docker_validation_results: "{{ docker_validation_results | combine({'compose_validation': {'status': 'PASS', 'stacks_validated': docker_compose_stacks | length, 'stacks': docker_compose_stacks | map(attribute='path') | list}}) }}"
        docker_validation_passed_count: "{{ docker_validation_passed_count + 1 }}"
      when: docker_compose_stacks | length > 0

    - name: Skip compose validation if no stacks configured
      set_fact:
        docker_validation_results: "{{ docker_validation_results | combine({'compose_validation': {'status': 'SKIP', 'reason': 'No Docker Compose stacks configured for validation'}}) }}"
      when: docker_compose_stacks | length == 0

  rescue:
    - name: Record compose validation failure
      set_fact:
        docker_validation_results: "{{ docker_validation_results | combine({'compose_validation': {'status': 'FAIL', 'stacks': docker_compose_stacks, 'error': ansible_failed_result.msg}}) }}"
        docker_validation_failed_count: "{{ docker_validation_failed_count + 1 }}"

    - name: Debug compose validation failure
      debug:
        msg: "Compose validation failed: {{ ansible_failed_result.msg }}"
      when: validation_config.collect_debug_info | default(true)

- name: Validate Docker Compose networks
  block:
    - name: Get Docker networks
      command: docker network ls --format "{{ '{{' }}.Name}}"
      register: docker_networks_result
      changed_when: false
      when: network_validation.expected_networks | length > 0

    - name: Validate expected networks exist
      assert:
        that:
          - item in docker_networks_result.stdout_lines
        fail_msg: "Expected Docker network '{{ item }}' not found"
        success_msg: "Docker network '{{ item }}' exists"
      loop: "{{ network_validation.expected_networks }}"
      when:
        - network_validation.expected_networks | length > 0
        - docker_networks_result is defined

    - name: Get detailed network information
      command: docker network inspect {{ item }}
      loop: "{{ network_validation.expected_networks }}"
      register: network_inspect_results
      changed_when: false
      when: network_validation.expected_networks | length > 0

    - name: Validate network driver configuration
      assert:
        that:
          - (item.stdout | from_json)[0].Driver in ['bridge', 'overlay', 'host', 'none']
        fail_msg: "Network {{ item.item }} has unsupported driver: {{ (item.stdout | from_json)[0].Driver }}"
        success_msg: "Network {{ item.item }} driver is valid: {{ (item.stdout | from_json)[0].Driver }}"
      loop: "{{ network_inspect_results.results }}"
      when:
        - network_validation.expected_networks | length > 0
        - network_inspect_results is defined
        - network_validation.validate_bridge_config | default(true)

    - name: Record network validation results
      set_fact:
        docker_validation_results: "{{ docker_validation_results | combine({'network_validation': {'status': 'PASS', 'networks_validated': network_validation.expected_networks | length, 'networks': network_validation.expected_networks}}) }}"
        docker_validation_passed_count: "{{ docker_validation_passed_count + 1 }}"
      when: network_validation.expected_networks | length > 0

    - name: Skip network validation if no networks configured
      set_fact:
        docker_validation_results: "{{ docker_validation_results | combine({'network_validation': {'status': 'SKIP', 'reason': 'No networks configured for validation'}}) }}"
      when: network_validation.expected_networks | length == 0

  rescue:
    - name: Record network validation failure
      set_fact:
        docker_validation_results: "{{ docker_validation_results | combine({'network_validation': {'status': 'FAIL', 'networks': network_validation.expected_networks, 'error': ansible_failed_result.msg}}) }}"
        docker_validation_failed_count: "{{ docker_validation_failed_count + 1 }}"

    - name: Debug network validation failure
      debug:
        msg: "Network validation failed: {{ ansible_failed_result.msg }}"
      when: validation_config.collect_debug_info | default(true)

- name: Validate Docker volumes
  block:
    - name: Get Docker volumes
      command: docker volume ls --format "{{ '{{' }}.Name}}"
      register: docker_volumes_result
      changed_when: false
      when: storage_validation.expected_volumes | length > 0

    - name: Validate expected volumes exist
      assert:
        that:
          - item in docker_volumes_result.stdout_lines
        fail_msg: "Expected Docker volume '{{ item }}' not found"
        success_msg: "Docker volume '{{ item }}' exists"
      loop: "{{ storage_validation.expected_volumes }}"
      when:
        - storage_validation.expected_volumes | length > 0
        - docker_volumes_result is defined

    - name: Get detailed volume information
      command: docker volume inspect {{ item }}
      loop: "{{ storage_validation.expected_volumes }}"
      register: volume_inspect_results
      changed_when: false
      when: storage_validation.expected_volumes | length > 0

    - name: Validate volume mount points are accessible
      stat:
        path: "{{ (item.stdout | from_json)[0].Mountpoint }}"
      loop: "{{ volume_inspect_results.results }}"
      register: volume_mountpoint_stats
      when:
        - storage_validation.expected_volumes | length > 0
        - volume_inspect_results is defined
        - storage_validation.check_volume_permissions | default(true)

    - name: Validate volume mount points exist and are accessible
      assert:
        that:
          - item.stat.exists
          - item.stat.readable
        fail_msg: "Volume mount point not accessible: {{ item.stat.path | default('Unknown') }}"
        success_msg: "Volume mount point accessible: {{ item.stat.path }}"
      loop: "{{ volume_mountpoint_stats.results }}"
      when:
        - storage_validation.expected_volumes | length > 0
        - volume_mountpoint_stats is defined
        - storage_validation.check_volume_permissions | default(true)

    - name: Record volume validation results
      set_fact:
        docker_validation_results: "{{ docker_validation_results | combine({'volume_validation': {'status': 'PASS', 'volumes_validated': storage_validation.expected_volumes | length, 'volumes': storage_validation.expected_volumes}}) }}"
        docker_validation_passed_count: "{{ docker_validation_passed_count + 1 }}"
      when: storage_validation.expected_volumes | length > 0

    - name: Skip volume validation if no volumes configured
      set_fact:
        docker_validation_results: "{{ docker_validation_results | combine({'volume_validation': {'status': 'SKIP', 'reason': 'No volumes configured for validation'}}) }}"
      when: storage_validation.expected_volumes | length == 0

  rescue:
    - name: Record volume validation failure
      set_fact:
        docker_validation_results: "{{ docker_validation_results | combine({'volume_validation': {'status': 'FAIL', 'volumes': storage_validation.expected_volumes, 'error': ansible_failed_result.msg}}) }}"
        docker_validation_failed_count: "{{ docker_validation_failed_count + 1 }}"

    - name: Debug volume validation failure
      debug:
        msg: "Volume validation failed: {{ ansible_failed_result.msg }}"
      when: validation_config.collect_debug_info | default(true)

- name: Validate service health checks
  block:
    - name: Check service health status in compose stacks
      command: docker compose -f {{ item.path }} ps --format json
      loop: "{{ docker_compose_stacks }}"
      register: compose_health_results
      changed_when: false
      when:
        - docker_compose_stacks | length > 0
        - item.validate_health_checks | default(false)

    - name: Parse service health status
      set_fact:
        service_health_status: "{{ service_health_status | default({}) | combine({item.item.path: (item.stdout | from_json if item.stdout else [])}) }}"
      loop: "{{ compose_health_results.results }}"
      when:
        - docker_compose_stacks | length > 0
        - compose_health_results is defined
        - item.rc == 0

    - name: Build (stack, service) pairs for health checks
      set_fact:
        health_service_pairs: >-
          {{ (health_service_pairs | default([])) + (
             (service_health_status[stack_item.path] | default([]))
             | map('combine', {'__stack_path': stack_item.path}) | list) }}
      loop: "{{ docker_compose_stacks | default([]) }}"
      loop_control: { loop_var: stack_item }
      when:
        - (docker_compose_stacks | default([])) | length > 0
        - service_health_status is defined
        - stack_item.validate_health_checks | default(false)

    - name: Validate services have healthy status
      assert:
        that:
          - item.Health is not defined or item.Health in ['healthy', 'none', '']
        fail_msg: "Service {{ item.Service }} in stack {{ item.__stack_path }} is unhealthy: {{ item.Health | default('unknown') }}"
        success_msg: "Service {{ item.Service }} in stack {{ item.__stack_path }} is healthy"
      loop: "{{ health_service_pairs | default([]) }}"

    - name: Record health check validation results
      set_fact:
        docker_validation_results: "{{ docker_validation_results | combine({'health_checks': {'status': 'PASS', 'stacks_with_health_checks': health_check_stacks | length}}) }}"
        docker_validation_passed_count: "{{ docker_validation_passed_count + 1 }}"
      vars:
        health_check_stacks: "{{ docker_compose_stacks | selectattr('validate_health_checks', 'defined') | selectattr('validate_health_checks', 'equalto', true) | list }}"
      when: docker_compose_stacks | length > 0

  rescue:
    - name: Record health check validation failure
      set_fact:
        docker_validation_results: "{{ docker_validation_results | combine({'health_checks': {'status': 'FAIL', 'error': ansible_failed_result.msg}}) }}"
        docker_validation_failed_count: "{{ docker_validation_failed_count + 1 }}"

    - name: Debug health check validation failure
      debug:
        msg: "Health check validation failed: {{ ansible_failed_result.msg }}"
      when: validation_config.collect_debug_info | default(true)

- name: Display compose validation summary
  debug:
    msg:
      - "Docker Compose Validation Results:"
      - "  Stack Validation: {{ docker_validation_results.compose_validation.status | default('SKIP') }}"
      - "  Network Validation: {{ docker_validation_results.network_validation.status | default('SKIP') }}"
      - "  Volume Validation: {{ docker_validation_results.volume_validation.status | default('SKIP') }}"
      - "  Health Checks: {{ docker_validation_results.health_checks.status | default('SKIP') }}"
  when: reporting.log_level in ['debug', 'info']

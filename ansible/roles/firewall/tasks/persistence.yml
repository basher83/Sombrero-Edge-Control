---
# iptables persistence configuration

- name: Ensure iptables rules directory exists
  ansible.builtin.file:
    path: /etc/iptables
    state: directory
    owner: root
    group: root
    mode: '0755'
  become: true

- name: Create backup directory
  ansible.builtin.file:
    path: "{{ firewall_rules_backup_dir }}"
    state: directory
    owner: root
    group: root
    mode: '0700'
  become: true
  when: firewall_create_backup | bool

- name: Save current iptables rules
  block:
    - name: Save IPv4 rules
      ansible.builtin.shell: |
        iptables-save > /etc/iptables/rules.v4
      become: true
      register: save_v4
      when: firewall_save_rules_on_change | bool

    - name: Save IPv6 rules
      ansible.builtin.shell: |
        ip6tables-save > /etc/iptables/rules.v6
      become: true
      register: save_v6
      when:
        - firewall_save_rules_on_change | bool
        - firewall_ipv6_enabled | bool

    - name: Create timestamped backup
      ansible.builtin.shell: |
        timestamp=$(date +%Y%m%d_%H%M%S)
        cp /etc/iptables/rules.v4 "{{ firewall_rules_backup_dir }}/rules.v4.${timestamp}"
        {% if firewall_ipv6_enabled %}
        cp /etc/iptables/rules.v6 "{{ firewall_rules_backup_dir }}/rules.v6.${timestamp}"
        {% endif %}
      become: true
      when: firewall_create_backup | bool

- name: Configure netfilter-persistent service
  block:
    - name: Enable netfilter-persistent service
      systemd:
        name: netfilter-persistent
        enabled: true
        state: started
      become: true

    - name: Create netfilter-persistent configuration
      copy:
        content: |
          # netfilter-persistent configuration
          # Automatically load iptables rules on boot
          ENABLED="yes"
          SAVE_ON_STOP="yes"
          SAVE_ON_RESTART="yes"
        dest: /etc/default/netfilter-persistent
        owner: root
        group: root
        mode: '0644'
      become: true

- name: Test rule restoration
  block:
    - name: Create test script for rule restoration
      copy:
        content: |
          #!/bin/bash
          # Test iptables rule restoration

          echo "Testing iptables rule restoration..."

          # Save current rules
          iptables-save > /tmp/test-current.rules

          # Count rules
          current_count=$(iptables -S | wc -l)

          # Restore from saved file
          iptables-restore < /etc/iptables/rules.v4

          # Count rules after restore
          restored_count=$(iptables -S | wc -l)

          echo "Current rules: $current_count"
          echo "Restored rules: $restored_count"

          if [ "$current_count" -eq "$restored_count" ]; then
            echo "✓ Rule restoration successful"
            exit 0
          else
            echo "✗ Rule counts differ"
            exit 1
          fi
        dest: /tmp/test-iptables-restore.sh
        mode: '0755'
      become: true

    - name: Test rule restoration
      ansible.builtin.command: /tmp/test-iptables-restore.sh
      register: restore_test
      changed_when: false
      failed_when: false

    - name: Display restoration test results
      ansible.builtin.debug:
        msg: "{{ restore_test.stdout_lines }}"
      when: firewall_debug_mode | bool

- name: Create systemd service for emergency firewall restore
  copy:
    content: |
      [Unit]
      Description=Emergency Firewall Restore
      After=network-pre.target
      Before=network.target

      [Service]
      Type=oneshot
      ExecStart=/sbin/iptables-restore /etc/iptables/rules.v4
      {% if firewall_ipv6_enabled %}
      ExecStart=/sbin/ip6tables-restore /etc/iptables/rules.v6
      {% endif %}
      RemainAfterExit=yes

      [Install]
      WantedBy=multi-user.target
    dest: /etc/systemd/system/firewall-restore.service
    owner: root
    group: root
    mode: '0644'
  become: true

- name: Create Docker-aware persistence warning
  copy:
    content: |
      #!/bin/bash
      # WARNING: Docker-aware iptables persistence

      # This script ensures Docker compatibility when saving iptables rules

      echo "Saving iptables rules with Docker compatibility check..."

      # Check if Docker chains exist
      if iptables -L DOCKER -n >/dev/null 2>&1; then
        echo "⚠️  Docker is running - preserving Docker chains"
        echo "Note: Docker rules will be recreated on Docker restart"
      fi

      # Save all rules including Docker chains
      iptables-save > /etc/iptables/rules.v4
      {% if firewall_ipv6_enabled %}
      ip6tables-save > /etc/iptables/rules.v6
      {% endif %}

      echo "✓ Rules saved to /etc/iptables/"
      echo ""
      echo "To restore manually: iptables-restore < /etc/iptables/rules.v4"
      echo "Automatic restore on boot: Enabled via netfilter-persistent"
    dest: /usr/local/bin/save-firewall-rules
    owner: root
    group: root
    mode: '0755'
  become: true
  when: firewall_docker_present | bool

- name: Clean up old backups
  ansible.builtin.shell: |
    find {{ firewall_rules_backup_dir }} -name "rules.v*.2*" -mtime +30 -delete
  become: true
  when: firewall_create_backup | bool
  changed_when: false

---
# Security hardening tasks for firewall

- name: Drop malformed packets
  block:
    - name: Drop invalid packets
      iptables:
        chain: INPUT
        ctstate: INVALID
        jump: DROP
        comment: "Drop invalid packets"
      when: firewall_drop_invalid | bool

    - name: Drop packets with invalid TCP flags (XMAS)
      iptables:
        chain: INPUT
        protocol: tcp
        tcp_flags:
          flags: ALL
          flags_set:
            - FIN
            - PSH
            - URG
        jump: DROP
        comment: "Drop XMAS packets"
      when: firewall_drop_xmas_packets | bool

    - name: Drop NULL packets
      iptables:
        chain: INPUT
        protocol: tcp
        tcp_flags:
          flags: ALL
          flags_set: []
        jump: DROP
        comment: "Drop NULL packets"
      when: firewall_drop_null_packets | bool

- name: Prevent IP spoofing
  block:
    - name: Enable reverse path filtering
      sysctl:
        name: "{{ item }}"
        value: "1"
        state: present
        reload: true
      loop:
        - net.ipv4.conf.all.rp_filter
        - net.ipv4.conf.default.rp_filter
      when: firewall_prevent_ip_spoofing | bool

    - name: Drop spoofed packets from private ranges on external interface
      iptables:
        chain: INPUT
        in_interface: "{{ firewall_external_interface }}"
        source: "{{ item }}"
        jump: DROP
        comment: "Drop spoofed {{ item }}"
      loop:
        - "10.0.0.0/8"
        - "172.16.0.0/12"
        - "192.168.0.0/16"
        - "127.0.0.0/8"
        - "169.254.0.0/16"
      when:
        - firewall_prevent_ip_spoofing | bool
        - item not in firewall_trusted_networks

- name: Configure port scan protection
  block:
    - name: Create port scan detection chain
      iptables:
        chain: PORT_SCAN
        chain_management: true
        state: present
      when: firewall_port_scan_protection | bool

    - name: Log port scan attempts
      iptables:
        chain: PORT_SCAN
        jump: LOG
        log_prefix: "Port Scan: "
        log_level: 4
        limit: "5/minute"
        comment: "Log port scans"
      when: firewall_port_scan_protection | bool

    - name: Drop port scan packets
      iptables:
        chain: PORT_SCAN
        jump: DROP
        comment: "Drop port scan"
      when: firewall_port_scan_protection | bool

    - name: Detect port scans (SYN without ACK)
      iptables:
        chain: INPUT
        protocol: tcp
        tcp_flags:
          flags: "ACK,FIN,RST"
          flags_set: []
        ctstate: NEW
        jump: PORT_SCAN
        comment: "Detect port scans"
      when: firewall_port_scan_protection | bool

- name: Configure DDoS protection
  block:
    - name: Limit new connections per IP
      iptables:
        chain: INPUT
        protocol: tcp
        ctstate: NEW
        match: recent
        recent: set
        recent_name: DEFAULT
        recent_mask: 255.255.255.255
        comment: "Track new connections"
      when: firewall_enable_rate_limiting | bool

    - name: Drop excessive connections
      iptables:
        chain: INPUT
        protocol: tcp
        ctstate: NEW
        match: recent
        recent: update
        recent_seconds: 60
        recent_hitcount: 20
        recent_name: DEFAULT
        recent_mask: 255.255.255.255
        jump: DROP
        comment: "Drop excessive connections"
      when: firewall_enable_rate_limiting | bool

- name: Harden kernel parameters
  sysctl:
    name: "{{ item.key }}"
    value: "{{ item.value }}"
    state: present
    reload: true
  loop:
    - { key: "net.ipv4.tcp_syncookies", value: "1" }
    - { key: "net.ipv4.conf.all.accept_source_route", value: "0" }
    - { key: "net.ipv4.conf.default.accept_source_route", value: "0" }
    - { key: "net.ipv4.conf.all.accept_redirects", value: "0" }
    - { key: "net.ipv4.conf.default.accept_redirects", value: "0" }
    - { key: "net.ipv4.conf.all.secure_redirects", value: "0" }
    - { key: "net.ipv4.conf.default.secure_redirects", value: "0" }
    - { key: "net.ipv4.icmp_echo_ignore_broadcasts", value: "1" }
    - { key: "net.ipv4.icmp_ignore_bogus_error_responses", value: "1" }
    - { key: "net.ipv4.conf.all.log_martians", value: "1" }
    - { key: "net.ipv4.conf.default.log_martians", value: "1" }

- name: Create security summary
  copy:
    content: |
      FIREWALL SECURITY HARDENING APPLIED
      ====================================
      Date: {{ ansible_date_time.iso8601 }}

      Security Features Enabled:
      - Invalid packet dropping: {{ firewall_drop_invalid | default(false) }}
      - XMAS packet dropping: {{ firewall_drop_xmas_packets | default(false) }}
      - NULL packet dropping: {{ firewall_drop_null_packets | default(false) }}
      - IP spoofing prevention: {{ firewall_prevent_ip_spoofing | default(false) }}
      - Port scan protection: {{ firewall_port_scan_protection | default(false) }}
      - SYN flood protection: {{ firewall_syn_flood_protection | default(false) }}
      - Rate limiting: {{ firewall_enable_rate_limiting | default(false) }}

      Kernel Hardening Applied:
      - TCP SYN cookies enabled
      - Source routing disabled
      - ICMP redirects disabled
      - Martian packet logging enabled

      Docker Considerations:
      {% if firewall_docker_present %}
      - Docker is present - container security via DOCKER-USER chain
      - Remember: Container published ports bypass INPUT rules
      {% else %}
      - Docker not detected - standard host firewall rules apply
      {% endif %}
    dest: /etc/iptables/security-hardening.txt
    owner: root
    group: root
    mode: '0644'

---
#SPDX-License-Identifier: MIT-0
# Cleanup Operations Tasks

- name: Initialize cleanup operation
  set_fact:
    lifecycle_operation_log: "{{ lifecycle_operation_log + ['Starting cleanup operation at ' + ansible_date_time.iso8601] }}"
    cleanup_results: {}

- name: Terraform artifacts cleanup
  block:
    - name: Find Terraform cache directories
      find:
        paths: "{{ terraform_project_path }}"
        patterns: ".terraform"
        file_type: directory
      register: terraform_cache_dirs
      delegate_to: localhost
      when: "'terraform_state_backup' in cleanup_artifacts"

    - name: Clean Terraform cache directories
      file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ terraform_cache_dirs.files | default([]) }}"
      delegate_to: localhost
      when:
        - "'terraform_state_backup' in cleanup_artifacts"
        - not dry_run_mode | bool

    - name: Find Terraform plan files
      find:
        paths: "{{ terraform_project_path }}"
        patterns: "*.tfplan"
        file_type: file
      register: terraform_plan_files
      delegate_to: localhost
      when: "'terraform_state_backup' in cleanup_artifacts"

    - name: Clean Terraform plan files
      file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ terraform_plan_files.files | default([]) }}"
      delegate_to: localhost
      when:
        - "'terraform_state_backup' in cleanup_artifacts"
        - not dry_run_mode | bool

    - name: Record Terraform cleanup results
      set_fact:
        cleanup_results: "{{ cleanup_results | combine({
          'terraform_cleanup': {
            'status': 'SUCCESS',
            'cache_dirs_removed': terraform_cache_dirs.files | length | default(0),
            'plan_files_removed': terraform_plan_files.files | length | default(0)
          }
        }) }}"

    - name: Log Terraform cleanup completion
      set_fact:
        lifecycle_operation_log: "{{ lifecycle_operation_log + ['Terraform artifacts cleanup completed at ' + ansible_date_time.iso8601] }}"

  rescue:
    - name: Record Terraform cleanup failure
      set_fact:
        cleanup_results: "{{ cleanup_results | combine({
          'terraform_cleanup': {
            'status': 'FAILED',
            'error': ansible_failed_result.msg
          }
        }) }}"
        lifecycle_operation_log: "{{ lifecycle_operation_log + ['Terraform cleanup failed: ' + ansible_failed_result.msg] }}"

  when: "'terraform_state_backup' in cleanup_artifacts"

- name: Ansible facts cache cleanup
  block:
    - name: Find Ansible facts cache files
      find:
        paths: "{{ ansible_cleanup.facts_cache_locations }}"
        patterns: "*"
        file_type: file
      register: ansible_cache_files
      delegate_to: localhost
      when: "'ansible_facts_cache' in cleanup_artifacts"

    - name: Clean Ansible facts cache
      file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ ansible_cache_files.files | default([]) }}"
      delegate_to: localhost
      when:
        - "'ansible_facts_cache' in cleanup_artifacts"
        - not dry_run_mode | bool

    - name: Record Ansible cache cleanup results
      set_fact:
        cleanup_results: "{{ cleanup_results | combine({
          'ansible_cache_cleanup': {
            'status': 'SUCCESS',
            'cache_files_removed': ansible_cache_files.files | length | default(0)
          }
        }) }}"

    - name: Log Ansible cache cleanup completion
      set_fact:
        lifecycle_operation_log: "{{ lifecycle_operation_log + ['Ansible cache cleanup completed at ' + ansible_date_time.iso8601] }}"

  rescue:
    - name: Record Ansible cache cleanup failure
      set_fact:
        cleanup_results: "{{ cleanup_results | combine({
          'ansible_cache_cleanup': {
            'status': 'FAILED',
            'error': ansible_failed_result.msg
          }
        }) }}"
        lifecycle_operation_log: "{{ lifecycle_operation_log + ['Ansible cache cleanup failed: ' + ansible_failed_result.msg] }}"

  when: "'ansible_facts_cache' in cleanup_artifacts"

- name: SSH known_hosts cleanup
  block:
    - name: Find SSH known_hosts entries for cleanup
      shell: |
        for host_pattern in {{ ssh_cleanup.host_patterns_to_remove | join(' ') }}; do
          grep -c "$host_pattern" {{ ssh_cleanup.ssh_config_locations | first }} || echo "0"
        done
      register: ssh_entries_found
      delegate_to: localhost
      when: "'ssh_known_hosts' in cleanup_artifacts"
      changed_when: false
      failed_when: false

    - name: Clean SSH known_hosts entries
      lineinfile:
        path: "{{ item.0 }}"
        regexp: "{{ item.1 }}"
        state: absent
      loop: "{{ ssh_cleanup.ssh_config_locations | product(ssh_cleanup.host_patterns_to_remove) | list }}"
      delegate_to: localhost
      when:
        - "'ssh_known_hosts' in cleanup_artifacts"
        - not dry_run_mode | bool
      failed_when: false

    - name: Record SSH cleanup results
      set_fact:
        cleanup_results: "{{ cleanup_results | combine({
          'ssh_cleanup': {
            'status': 'SUCCESS',
            'entries_processed': ssh_cleanup.host_patterns_to_remove | length
          }
        }) }}"

    - name: Log SSH cleanup completion
      set_fact:
        lifecycle_operation_log: "{{ lifecycle_operation_log + ['SSH known_hosts cleanup completed at ' + ansible_date_time.iso8601] }}"

  rescue:
    - name: Record SSH cleanup failure
      set_fact:
        cleanup_results: "{{ cleanup_results | combine({
          'ssh_cleanup': {
            'status': 'FAILED',
            'error': ansible_failed_result.msg
          }
        }) }}"
        lifecycle_operation_log: "{{ lifecycle_operation_log + ['SSH cleanup failed: ' + ansible_failed_result.msg] }}"

  when: "'ssh_known_hosts' in cleanup_artifacts"

- name: Temporary files cleanup
  block:
    - name: Find temporary files for cleanup
      find:
        paths: "/tmp"
        patterns: "{{ filesystem_cleanup.temp_file_patterns }}"
        age: "1h"  # Only clean files older than 1 hour for safety
      register: temp_files_found
      delegate_to: localhost
      when: "'temporary_files' in cleanup_artifacts"

    - name: Clean temporary files
      file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ temp_files_found.files | default([]) }}"
      delegate_to: localhost
      when:
        - "'temporary_files' in cleanup_artifacts"
        - not dry_run_mode | bool
        - filesystem_cleanup.clean_temp_files | bool

    - name: Record temporary files cleanup results
      set_fact:
        cleanup_results: "{{ cleanup_results | combine({
          'temp_files_cleanup': {
            'status': 'SUCCESS',
            'files_removed': temp_files_found.files | length | default(0)
          }
        }) }}"

    - name: Log temporary files cleanup completion
      set_fact:
        lifecycle_operation_log: "{{ lifecycle_operation_log + ['Temporary files cleanup completed at ' + ansible_date_time.iso8601] }}"

  rescue:
    - name: Record temporary files cleanup failure
      set_fact:
        cleanup_results: "{{ cleanup_results | combine({
          'temp_files_cleanup': {
            'status': 'FAILED',
            'error': ansible_failed_result.msg
          }
        }) }}"
        lifecycle_operation_log: "{{ lifecycle_operation_log + ['Temporary files cleanup failed: ' + ansible_failed_result.msg] }}"

  when: "'temporary_files' in cleanup_artifacts"

- name: Old backup cleanup
  block:
    - name: Find old backup files
      find:
        paths: "{{ backup_location }}"
        patterns: "*"
        age: "{{ backup_retention_days }}d"
      register: old_backups
      delegate_to: localhost
      when: backup_retention_days | int > 0

    - name: Clean old backup files
      file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ old_backups.files | default([]) }}"
      delegate_to: localhost
      when:
        - backup_retention_days | int > 0
        - not dry_run_mode | bool

    - name: Record backup cleanup results
      set_fact:
        cleanup_results: "{{ cleanup_results | combine({
          'backup_cleanup': {
            'status': 'SUCCESS',
            'old_backups_removed': old_backups.files | length | default(0)
          }
        }) }}"

    - name: Log backup cleanup completion
      set_fact:
        lifecycle_operation_log: "{{ lifecycle_operation_log + ['Old backup cleanup completed at ' + ansible_date_time.iso8601] }}"

  rescue:
    - name: Record backup cleanup failure
      set_fact:
        cleanup_results: "{{ cleanup_results | combine({
          'backup_cleanup': {
            'status': 'FAILED',
            'error': ansible_failed_result.msg
          }
        }) }}"
        lifecycle_operation_log: "{{ lifecycle_operation_log + ['Backup cleanup failed: ' + ansible_failed_result.msg] }}"

  when: backup_retention_days | int > 0

- name: Calculate cleanup success rate
  set_fact:
    cleanup_success_count: "{{ cleanup_results | dict2items | selectattr('value.status', 'equalto', 'SUCCESS') | list | length }}"
    cleanup_total_count: "{{ cleanup_results | dict2items | list | length }}"
    cleanup_success_rate: "{{ ((cleanup_results | dict2items | selectattr('value.status', 'equalto', 'SUCCESS') | list | length / cleanup_results | dict2items | list | length) * 100) | round(2) if cleanup_results | dict2items | list | length > 0 else 100 }}"

- name: Set cleanup operation status
  set_fact:
    lifecycle_operation_status: "{{ 'SUCCESS' if cleanup_success_rate | float == 100 else ('PARTIAL' if cleanup_success_rate | float > 50 else 'FAILED') }}"
    lifecycle_operation_log: "{{ lifecycle_operation_log + ['Cleanup operation completed with ' + cleanup_success_rate | string + '% success rate at ' + ansible_date_time.iso8601] }}"

- name: Set dry run cleanup status
  set_fact:
    lifecycle_operation_status: "DRY_RUN_SUCCESS"
    lifecycle_operation_log: "{{ lifecycle_operation_log + ['Dry run cleanup operation completed at ' + ansible_date_time.iso8601] }}"
  when: dry_run_mode | bool

- name: Display cleanup operation results
  debug:
    msg:
      - "=== Cleanup Operation Results ==="
      - "Overall Status: {{ lifecycle_operation_status }}"
      - "Success Rate: {{ cleanup_success_rate }}%"
      - "Operations Completed: {{ cleanup_success_count }}/{{ cleanup_total_count }}"
      - "Dry Run Mode: {{ dry_run_mode }}"
      - "Cleanup Results:"
      - "{{ cleanup_results | to_nice_json }}"

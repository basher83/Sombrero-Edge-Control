---
#SPDX-License-Identifier: MIT
# Rollback Operations Tasks

- name: Initialize rollback operation
  ansible.builtin.set_fact:
    lifecycle_operation_log: "{{ lifecycle_operation_log + ['Starting rollback operation at ' + ansible_date_time.iso8601] }}"

- name: Confirm rollback operation (interactive)
  pause:
    prompt: |

      ⚠️  DESTRUCTIVE OPERATION WARNING ⚠️

      This will DESTROY the following infrastructure:
      {% for target in rollback_targets %}
      - {{ target }}
      {% endfor %}

      Terraform Project: {{ terraform_project_path }}
      Workspace: {{ terraform_workspace }}

      Type 'yes' to proceed with DESTRUCTION, or 'no' to cancel
    echo: true
  register: rollback_confirmation
  delegate_to: localhost
  when:
    - confirm_destructive_operations | bool
    - not dry_run_mode | bool

- name: Validate rollback confirmation
  fail:
    msg: "Rollback operation cancelled by user"
  when:
    - confirm_destructive_operations | bool
    - not dry_run_mode | bool
    - rollback_confirmation.user_input | default('no') | lower != 'yes'

- name: Log rollback confirmation
  ansible.builtin.set_fact:
    lifecycle_operation_log: "{{ lifecycle_operation_log + ['Rollback confirmed by user at ' + ansible_date_time.iso8601] }}"
  when:
    - not dry_run_mode | bool
    - rollback_confirmation.user_input | default('no') | lower == 'yes' or not confirm_destructive_operations | bool

- name: Check Terraform project exists
  stat:
    path: "{{ terraform_project_path }}"
  register: terraform_project_stat
  delegate_to: localhost

- name: Validate Terraform project
  fail:
    msg: "Terraform project path does not exist: {{ terraform_project_path }}"
  when: not terraform_project_stat.stat.exists

- name: Get current Terraform state information
  block:
    - name: Initialize Terraform (if needed)
      ansible.builtin.shell: |
        cd "{{ terraform_project_path }}"
        if [ ! -d ".terraform" ]; then
          terraform init
        fi
      register: terraform_init
      delegate_to: localhost
      when: not dry_run_mode | bool

    - name: Get Terraform workspace
      ansible.builtin.shell: terraform workspace show
      args:
        chdir: "{{ terraform_project_path }}"
      register: current_workspace
      delegate_to: localhost

    - name: Switch to target workspace (if needed)
      ansible.builtin.shell: terraform workspace select {{ terraform_workspace }}
      args:
        chdir: "{{ terraform_project_path }}"
      register: workspace_switch
      delegate_to: localhost
      when:
        - terraform_workspace != "default"
        - current_workspace.stdout != terraform_workspace
        - not dry_run_mode | bool

    - name: Get current Terraform state
      ansible.builtin.shell: terraform show -json
      args:
        chdir: "{{ terraform_project_path }}"
      register: terraform_state
      delegate_to: localhost
      failed_when: false

  rescue:
    - name: Log Terraform state retrieval failure
      ansible.builtin.set_fact:
        lifecycle_operation_log: "{{ lifecycle_operation_log + ['Failed to retrieve Terraform state: ' + ansible_failed_result.msg] }}"
        lifecycle_operation_status: "FAILED"

    - name: Fail rollback due to state issues
      fail:
        msg: "Cannot proceed with rollback: {{ ansible_failed_result.msg }}"

- name: Plan Terraform destroy operation
  ansible.builtin.shell: terraform plan -destroy {{ '-target=' + rollback_targets | join(' -target=') if rollback_targets | length > 0 else '' }}
  args:
    chdir: "{{ terraform_project_path }}"
  register: terraform_destroy_plan
  delegate_to: localhost
  when: not dry_run_mode | bool

- name: Display destroy plan (dry run or confirmation)
  ansible.builtin.debug:
    msg:
      - "=== Terraform Destroy Plan ==="
      - "{{ terraform_destroy_plan.stdout if terraform_destroy_plan is defined else 'DRY RUN MODE - No actual plan generated' }}"
  when:
    - dry_run_mode | bool or (logging.detailed_logging | bool)

- name: Execute Terraform destroy
  block:
    - name: Run Terraform destroy
      ansible.builtin.shell: |
        timeout {{ timeouts.terraform_operation }} terraform destroy -auto-approve \
        {{ '-target=' + rollback_targets | join(' -target=') if rollback_targets | length > 0 else '' }}
      args:
        chdir: "{{ terraform_project_path }}"
      register: terraform_destroy
      delegate_to: localhost
      when: not dry_run_mode | bool

    - name: Log successful destroy
      ansible.builtin.set_fact:
        lifecycle_operation_log: "{{ lifecycle_operation_log + ['Terraform destroy completed successfully at ' + ansible_date_time.iso8601] }}"
        lifecycle_operation_status: "SUCCESS"

  rescue:
    - name: Log Terraform destroy failure
      ansible.builtin.set_fact:
        lifecycle_operation_log: "{{ lifecycle_operation_log + ['Terraform destroy failed: ' + ansible_failed_result.msg] }}"
        lifecycle_operation_status: "FAILED"

    - name: Handle destroy failure
      ansible.builtin.debug:
        msg:
          - "⚠️  Terraform destroy failed!"
          - "Error: {{ ansible_failed_result.msg }}"
          - "Manual intervention may be required"

    - name: Continue with cleanup (best effort)
      ansible.builtin.debug:
        msg: "Continuing with cleanup operations despite Terraform destroy failure"
      when: rollback_settings.ignore_errors | bool

    - name: Fail rollback operation
      fail:
        msg: "Rollback failed during Terraform destroy: {{ ansible_failed_result.msg }}"
      when: not rollback_settings.ignore_errors | bool

- name: Clean up SSH known hosts entries
  block:
    - name: Backup SSH known_hosts
      copy:
        src: "{{ item }}"
        dest: "{{ item }}.backup.{{ ansible_date_time.epoch }}"
        remote_src: true
      loop: "{{ ssh_cleanup.ssh_config_locations }}"
      delegate_to: localhost
      when: ssh_cleanup.backup_ssh_config | bool
      failed_when: false

    - name: Remove SSH known_hosts entries
      lineinfile:
        path: "{{ item.0 }}"
        regexp: "{{ item.1 }}"
        state: absent
      loop: "{{ ssh_cleanup.ssh_config_locations | product(ssh_cleanup.host_patterns_to_remove) | list }}"
      delegate_to: localhost
      when:
        - ssh_cleanup.remove_known_hosts_entries | bool
        - not dry_run_mode | bool
      failed_when: false

    - name: Log SSH cleanup completion
      ansible.builtin.set_fact:
        lifecycle_operation_log: "{{ lifecycle_operation_log + ['SSH known_hosts cleanup completed at ' + ansible_date_time.iso8601] }}"

  rescue:
    - name: Log SSH cleanup issues
      ansible.builtin.set_fact:
        lifecycle_operation_log: "{{ lifecycle_operation_log + ['SSH cleanup encountered issues (non-critical): ' + ansible_failed_result.msg] }}"

- name: Clean up Ansible facts cache
  block:
    - name: Remove Ansible facts cache entries
      ansible.builtin.file:
        path: "{{ item }}/{{ inventory_hostname }}"
        state: absent
      loop: "{{ ansible_cleanup.facts_cache_locations }}"
      delegate_to: localhost
      when:
        - ansible_cleanup.clear_facts_cache | bool
        - not dry_run_mode | bool
      failed_when: false

    - name: Log Ansible cache cleanup completion
      ansible.builtin.set_fact:
        lifecycle_operation_log: "{{ lifecycle_operation_log + ['Ansible facts cache cleanup completed at ' + ansible_date_time.iso8601] }}"

  rescue:
    - name: Log Ansible cache cleanup issues
      ansible.builtin.set_fact:
        lifecycle_operation_log: "{{ lifecycle_operation_log + ['Ansible cache cleanup encountered issues (non-critical): ' + ansible_failed_result.msg] }}"

- name: Validate rollback success
  block:
    - name: Verify resources are destroyed
      ansible.builtin.shell: terraform show -json
      args:
        chdir: "{{ terraform_project_path }}"
      register: post_destroy_state
      delegate_to: localhost
      when: not dry_run_mode | bool

    - name: Analyze post-destroy state
      ansible.builtin.set_fact:
        remaining_resources: "{{ (post_destroy_state.stdout | from_json).values.root_module.resources | default([]) | length if post_destroy_state.stdout else 0 }}"
      when:
        - not dry_run_mode | bool
        - post_destroy_state is defined

    - name: Check rollback completion
      ansible.builtin.set_fact:
        lifecycle_operation_status: "{{ 'SUCCESS' if remaining_resources | int == 0 else 'PARTIAL' }}"
        lifecycle_operation_log: "{{ lifecycle_operation_log + ['Rollback validation completed: ' + remaining_resources | string + ' resources remaining'] }}"
      when:
        - not dry_run_mode | bool
        - remaining_resources is defined

  rescue:
    - name: Log validation issues
      ansible.builtin.set_fact:
        lifecycle_operation_log: "{{ lifecycle_operation_log + ['Post-rollback validation failed: ' + ansible_failed_result.msg] }}"

- name: Set dry run status
  ansible.builtin.set_fact:
    lifecycle_operation_status: "DRY_RUN_SUCCESS"
    lifecycle_operation_log: "{{ lifecycle_operation_log + ['Dry run rollback completed successfully at ' + ansible_date_time.iso8601] }}"
  when: dry_run_mode | bool

- name: Display rollback operation results
  ansible.builtin.debug:
    msg:
      - "=== Rollback Operation Results ==="
      - "Status: {{ lifecycle_operation_status }}"
      - "Targets: {{ rollback_targets | join(', ') }}"
      - "Dry Run: {{ dry_run_mode }}"
      - "{% if not dry_run_mode %}Resources Remaining: {{ remaining_resources | default('Unknown') }}{% endif %}"

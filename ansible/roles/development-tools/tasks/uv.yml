---
# uv Python package manager installation
# Custom installation since no quality Ansible collection exists

- name: Check if uv is already installed
  ansible.builtin.stat:
    path: "{{ devtools_uv_install_path }}"
  register: uv_binary

- name: Get current uv version
  ansible.builtin.command: "{{ devtools_uv_install_path }} --version"
  register: uv_current_version
  changed_when: false
  failed_when: false
  when: uv_binary.stat.exists

- name: Install uv Python package manager
  block:
    - name: Create temporary directory for uv installation
      ansible.builtin.tempfile:
        state: directory
      register: uv_temp_dir

    - name: Download uv installation script
      ansible.builtin.get_url:
        url: "https://astral.sh/uv/install.sh"
        dest: "{{ uv_temp_dir.path }}/install.sh"
        mode: '0755'
        timeout: 30

    - name: Install uv
      ansible.builtin.shell: |
        export UV_INSTALL_DIR="{{ devtools_uv_install_path | dirname }}"
        bash "{{ uv_temp_dir.path }}/install.sh"
      environment:
        UV_INSTALL_DIR: "{{ devtools_uv_install_path | dirname }}"
      register: uv_install_result
      changed_when: "'uv installed' in uv_install_result.stdout or uv_install_result.rc == 0"

    - name: Cleanup temporary directory
      ansible.builtin.file:
        path: "{{ uv_temp_dir.path }}"
        state: absent
      when: uv_temp_dir.path is defined

  when: >
    not uv_binary.stat.exists or
    (devtools_uv_version == "latest" and uv_current_version.rc != 0)

- name: Ensure uv binary is executable and in the right location
  ansible.builtin.file:
    path: "{{ devtools_uv_install_path }}"
    mode: '0755'
    owner: root
    group: root
  failed_when: false

- name: Create uv symlink if not in standard location
  ansible.builtin.file:
    src: "/home/{{ ansible_user }}/.cargo/bin/uv"
    dest: "{{ devtools_uv_install_path }}"
    state: link
    force: true
  when: not uv_binary.stat.exists
  failed_when: false

- name: Add uv to PATH for all users
  ansible.builtin.lineinfile:
    path: "/etc/profile.d/uv.sh"
    line: 'export PATH="/usr/local/bin:$PATH"'
    create: true
    mode: '0644'

- name: Add uv to user PATH
  ansible.builtin.blockinfile:
    path: "/home/{{ devtools_user }}/.bashrc"
    marker: "# {mark} ANSIBLE MANAGED BLOCK - uv"
    block: |
      # uv Python package manager
      export PATH="/usr/local/bin:$PATH"

      # uv aliases for convenience
      alias pip-install='uv pip install'
      alias pip-list='uv pip list'
      alias pip-uninstall='uv pip uninstall'
    create: true
  become_user: "{{ devtools_user }}"

- name: Create uv configuration directory
  ansible.builtin.file:
    path: "/home/{{ devtools_user }}/.config/uv"
    state: directory
    owner: "{{ devtools_user }}"
    group: "{{ devtools_user }}"
    mode: '0755'

- name: Configure uv with better defaults
  ansible.builtin.copy:
    content: |
      [pip]
      index-strategy = "unsafe-best-match"
      keyring-provider = "disabled"

      [tool.uv]
      native-tls = true
      cache-dir = "/home/{{ devtools_user }}/.cache/uv"
    dest: "/home/{{ devtools_user }}/.config/uv/uv.toml"
    owner: "{{ devtools_user }}"
    group: "{{ devtools_user }}"
    mode: '0644'

- name: Create uv cache directory
  ansible.builtin.file:
    path: "/home/{{ devtools_user }}/.cache/uv"
    state: directory
    owner: "{{ devtools_user }}"
    group: "{{ devtools_user }}"
    mode: '0755'

- name: Verify uv installation
  ansible.builtin.command: uv --version
  register: uv_version_check
  changed_when: false
  failed_when: false

- name: Display uv installation result
  ansible.builtin.debug:
    msg: "uv installed successfully: {{ uv_version_check.stdout }}"
  when: uv_version_check.rc == 0

- name: Install common Python packages with uv
  ansible.builtin.shell: |
    uv pip install --system requests pyyaml jinja2
  become_user: "{{ devtools_user }}"
  register: uv_package_install
  changed_when: uv_package_install.rc == 0
  failed_when: false

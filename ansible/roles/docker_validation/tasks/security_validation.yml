---
#SPDX-License-Identifier: MIT
# Docker security validation tasks

- name: Validate container security configuration
  block:
    - name: Get detailed container information for security validation
      community.docker.docker_container_info:
        name: "{{ item.name }}"
      loop: "{{ expected_containers }}"
      register: security_container_info
      when: expected_containers | length > 0

    - name: Validate containers are not running in privileged mode
      ansible.builtin.assert:
        that:
          - not (item.container.HostConfig.Privileged | default(false))
        fail_msg: "Container {{ item.item.name }} is running in privileged mode"
        success_msg: "Container {{ item.item.name }} is not privileged"
      loop: "{{ security_container_info.results }}"
      when:
        - expected_containers | length > 0
        - security_container_info is defined
        - item.container is defined
        - security_validation.check_privileged_containers | default(true)
      register: privileged_checks

    - name: Validate containers are not running as root user
      ansible.builtin.assert:
        that:
          - item.container.Config.User != "" and item.container.Config.User != "0" and item.container.Config.User != "root"
        fail_msg: "Container {{ item.item.name }} is running as root user"
        success_msg: "Container {{ item.item.name }} is running as non-root user: {{ item.container.Config.User }}"
      loop: "{{ security_container_info.results }}"
      when:
        - expected_containers | length > 0
        - security_container_info is defined
        - item.container is defined
        - security_validation.check_root_user | default(true)
      register: root_user_checks

    - name: Validate container capabilities are limited
      ansible.builtin.assert:
        that:
          - item.container.HostConfig.CapAdd | default([]) | length == 0 or 'ALL' not in (item.container.HostConfig.CapAdd | default([]))
        fail_msg: "Container {{ item.item.name }} has excessive capabilities: {{ item.container.HostConfig.CapAdd | default([]) }}"
        success_msg: "Container {{ item.item.name }} capabilities are properly limited"
      loop: "{{ security_container_info.results }}"
      when:
        - expected_containers | length > 0
        - security_container_info is defined
        - item.container is defined
        - security_validation.check_capabilities | default(true)
      register: capabilities_checks

    - name: Record container security validation results
      ansible.builtin.set_fact:
        docker_validation_results: "{{ docker_validation_results | combine({'container_security': {'status': 'PASS', 'containers_validated': expected_containers | length, 'security_checks': ['privileged', 'root_user', 'capabilities']}}) }}"
        docker_validation_passed_count: "{{ docker_validation_passed_count + 1 }}"
      when: expected_containers | length > 0

    - name: Skip container security validation if no containers
      ansible.builtin.set_fact:
        docker_validation_results: "{{ docker_validation_results | combine({'container_security': {'status': 'SKIP', 'reason': 'No containers configured for validation'}}) }}"
      when: expected_containers | length == 0

  rescue:
    - name: Record container security validation failure
      ansible.builtin.set_fact:
        docker_validation_results: "{{ docker_validation_results | combine({'container_security': {'status': 'FAIL', 'containers': expected_containers, 'error': ansible_failed_result.msg}}) }}"
        docker_validation_failed_count: "{{ docker_validation_failed_count + 1 }}"

    - name: Debug container security validation failure
      ansible.builtin.debug:
        msg: "Container security validation failed: {{ ansible_failed_result.msg }}"
      when: validation_config.collect_debug_info | default(true)

- name: Validate Docker daemon security configuration
  block:
    - name: Check Docker daemon configuration file
      stat:
        path: /etc/docker/daemon.json
      register: daemon_config_stat

    - name: Read Docker daemon configuration
      slurp:
        src: /etc/docker/daemon.json
      register: daemon_config_content
      when: daemon_config_stat.stat.exists

    - name: Parse daemon configuration
      ansible.builtin.set_fact:
        daemon_config: "{{ (daemon_config_content.content | b64decode | from_json) if daemon_config_stat.stat.exists else {} }}"

    - name: Validate required daemon configuration keys
      ansible.builtin.assert:
        that:
          - item in daemon_config.keys()
        fail_msg: "Required daemon configuration key missing: {{ item }}"
        success_msg: "Required daemon configuration key present: {{ item }}"
      loop: "{{ daemon_config_validation.required_config_keys }}"
      when:
        - daemon_config_validation.required_config_keys | length > 0
        - daemon_config_validation.validate_daemon_config | default(true)

    - name: Validate forbidden daemon configuration keys are not present
      ansible.builtin.assert:
        that:
          - item not in daemon_config.keys()
        fail_msg: "Forbidden daemon configuration key present: {{ item }}"
        success_msg: "Forbidden daemon configuration key not present: {{ item }}"
      loop: "{{ daemon_config_validation.forbidden_config_keys }}"
      when:
        - daemon_config_validation.forbidden_config_keys | length > 0
        - daemon_config_validation.validate_daemon_config | default(true)

    - name: Validate logging driver is in whitelist
      ansible.builtin.assert:
        that:
          - daemon_config['log-driver'] | default('json-file') in daemon_config_validation.logging_driver_whitelist
        fail_msg: "Logging driver not in whitelist: {{ daemon_config['log-driver'] | default('json-file') }}"
        success_msg: "Logging driver is approved: {{ daemon_config['log-driver'] | default('json-file') }}"
      when:
        - daemon_config_validation.logging_driver_whitelist | length > 0
        - daemon_config_validation.validate_daemon_config | default(true)

    - name: Record daemon security validation results
      ansible.builtin.set_fact:
        docker_validation_results: "{{ docker_validation_results | combine({'daemon_security': {'status': 'PASS', 'config_file_exists': daemon_config_stat.stat.exists, 'logging_driver': daemon_config['log-driver'] | default('json-file')}}) }}"
        docker_validation_passed_count: "{{ docker_validation_passed_count + 1 }}"
      when: daemon_config_validation.validate_daemon_config | default(true)

    - name: Skip daemon security validation if disabled
      ansible.builtin.set_fact:
        docker_validation_results: "{{ docker_validation_results | combine({'daemon_security': {'status': 'SKIP', 'reason': 'Daemon configuration validation disabled'}}) }}"
      when: not (daemon_config_validation.validate_daemon_config | default(true))

  rescue:
    - name: Record daemon security validation failure
      ansible.builtin.set_fact:
        docker_validation_results: "{{ docker_validation_results | combine({'daemon_security': {'status': 'FAIL', 'error': ansible_failed_result.msg}}) }}"
        docker_validation_failed_count: "{{ docker_validation_failed_count + 1 }}"

    - name: Debug daemon security validation failure
      ansible.builtin.debug:
        msg: "Daemon security validation failed: {{ ansible_failed_result.msg }}"
      when: validation_config.collect_debug_info | default(true)

- name: Validate user namespace configuration
  block:
    - name: Check user namespace remapping in daemon config
      ansible.builtin.assert:
        that:
          - daemon_config['userns-remap'] is defined
        fail_msg: "User namespace remapping not configured in Docker daemon"
        success_msg: "User namespace remapping configured: {{ daemon_config['userns-remap'] }}"
      when:
        - security_validation.validate_user_namespaces | default(true)
        - daemon_config is defined
        - daemon_config_validation.validate_daemon_config | default(true)

    - name: Check for user namespace in container configuration
      ansible.builtin.assert:
        that:
          - item.container.HostConfig.UsernsMode | default('') != 'host'
        fail_msg: "Container {{ item.item.name }} is using host user namespace"
        success_msg: "Container {{ item.item.name }} user namespace is properly configured"
      loop: "{{ security_container_info.results }}"
      when:
        - expected_containers | length > 0
        - security_container_info is defined
        - item.container is defined
        - security_validation.validate_user_namespaces | default(true)

    - name: Record user namespace validation results
      ansible.builtin.set_fact:
        docker_validation_results: "{{ docker_validation_results | combine({'user_namespaces': {'status': 'PASS', 'daemon_remapping': daemon_config['userns-remap'] | default('none')}}) }}"
        docker_validation_passed_count: "{{ docker_validation_passed_count + 1 }}"
      when: security_validation.validate_user_namespaces | default(true)

    - name: Skip user namespace validation if disabled
      ansible.builtin.set_fact:
        docker_validation_results: "{{ docker_validation_results | combine({'user_namespaces': {'status': 'SKIP', 'reason': 'User namespace validation disabled'}}) }}"
      when: not (security_validation.validate_user_namespaces | default(true))

  rescue:
    - name: Record user namespace validation failure
      ansible.builtin.set_fact:
        docker_validation_results: "{{ docker_validation_results | combine({'user_namespaces': {'status': 'FAIL', 'error': ansible_failed_result.msg}}) }}"
        docker_validation_failed_count: "{{ docker_validation_failed_count + 1 }}"

    - name: Debug user namespace validation failure
      ansible.builtin.debug:
        msg: "User namespace validation failed: {{ ansible_failed_result.msg }}"
      when: validation_config.collect_debug_info | default(true)

- name: Validate seccomp security profiles
  block:
    - name: Check container seccomp profiles
      ansible.builtin.assert:
        that:
          - item.container.HostConfig.SecurityOpt | default([]) | select('match', 'seccomp:unconfined') | list | length == 0
        fail_msg: "Container {{ item.item.name }} is running with unconfined seccomp profile"
        success_msg: "Container {{ item.item.name }} has proper seccomp profile configuration"
      loop: "{{ security_container_info.results }}"
      when:
        - expected_containers | length > 0
        - security_container_info is defined
        - item.container is defined
        - security_validation.validate_seccomp | default(true)

    - name: Record seccomp validation results
      ansible.builtin.set_fact:
        docker_validation_results: "{{ docker_validation_results | combine({'seccomp_profiles': {'status': 'PASS', 'containers_validated': expected_containers | length}}) }}"
        docker_validation_passed_count: "{{ docker_validation_passed_count + 1 }}"
      when:
        - expected_containers | length > 0
        - security_validation.validate_seccomp | default(true)

    - name: Skip seccomp validation if disabled
      ansible.builtin.set_fact:
        docker_validation_results: "{{ docker_validation_results | combine({'seccomp_profiles': {'status': 'SKIP', 'reason': 'Seccomp validation disabled or no containers'}}) }}"
      when: not (security_validation.validate_seccomp | default(true)) or expected_containers | length == 0

  rescue:
    - name: Record seccomp validation failure
      ansible.builtin.set_fact:
        docker_validation_results: "{{ docker_validation_results | combine({'seccomp_profiles': {'status': 'FAIL', 'error': ansible_failed_result.msg}}) }}"
        docker_validation_failed_count: "{{ docker_validation_failed_count + 1 }}"

    - name: Debug seccomp validation failure
      ansible.builtin.debug:
        msg: "Seccomp validation failed: {{ ansible_failed_result.msg }}"
      when: validation_config.collect_debug_info | default(true)

- name: Validate read-only root filesystem
  block:
    - name: Check containers have read-only root filesystem
      ansible.builtin.assert:
        that:
          - item.container.HostConfig.ReadonlyRootfs | default(false)
        fail_msg: "Container {{ item.item.name }} does not have read-only root filesystem"
        success_msg: "Container {{ item.item.name }} has read-only root filesystem"
      loop: "{{ security_container_info.results }}"
      when:
        - expected_containers | length > 0
        - security_container_info is defined
        - item.container is defined
        - security_validation.check_read_only_root | default(true)
        - item.item.read_only_root | default(false)  # Only check if explicitly configured

    - name: Record read-only filesystem validation results
      ansible.builtin.set_fact:
        docker_validation_results: "{{ docker_validation_results | combine({'readonly_filesystem': {'status': 'PASS', 'containers_checked': readonly_containers | length}}) }}"
        docker_validation_passed_count: "{{ docker_validation_passed_count + 1 }}"
      vars:
        readonly_containers: "{{ expected_containers | selectattr('read_only_root', 'defined') | selectattr('read_only_root', 'equalto', true) | list }}"
      when:
        - expected_containers | length > 0
        - security_validation.check_read_only_root | default(true)

    - name: Skip read-only filesystem validation if not applicable
      ansible.builtin.set_fact:
        docker_validation_results: "{{ docker_validation_results | combine({'readonly_filesystem': {'status': 'SKIP', 'reason': 'Read-only root validation disabled or not configured'}}) }}"
      when: not (security_validation.check_read_only_root | default(true)) or expected_containers | length == 0

  rescue:
    - name: Record read-only filesystem validation failure
      ansible.builtin.set_fact:
        docker_validation_results: "{{ docker_validation_results | combine({'readonly_filesystem': {'status': 'FAIL', 'error': ansible_failed_result.msg}}) }}"
        docker_validation_failed_count: "{{ docker_validation_failed_count + 1 }}"

    - name: Debug read-only filesystem validation failure
      ansible.builtin.debug:
        msg: "Read-only filesystem validation failed: {{ ansible_failed_result.msg }}"
      when: validation_config.collect_debug_info | default(true)

- name: Display security validation summary
  ansible.builtin.debug:
    msg:
      - "Docker Security Validation Results:"
      - "  Container Security: {{ docker_validation_results.container_security.status | default('SKIP') }}"
      - "  Daemon Security: {{ docker_validation_results.daemon_security.status | default('SKIP') }}"
      - "  User Namespaces: {{ docker_validation_results.user_namespaces.status | default('SKIP') }}"
      - "  Seccomp Profiles: {{ docker_validation_results.seccomp_profiles.status | default('SKIP') }}"
      - "  Read-only Filesystem: {{ docker_validation_results.readonly_filesystem.status | default('SKIP') }}"
  when: reporting.log_level in ['debug', 'info']
